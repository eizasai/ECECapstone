
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005764  08005764  00006764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f8  080057f8  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005800  08005800  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005804  08005804  00006804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005808  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000060  08005868  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08005868  000073b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d806  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a5  00000000  00000000  00014896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00016e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000909  00000000  00000000  00017a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e39  00000000  00000000  00018309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012587  00000000  00000000  00030142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088eac  00000000  00000000  000426c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e8  00000000  00000000  000cb5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ce9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800574c 	.word	0x0800574c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800574c 	.word	0x0800574c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Determine_I2C_Bus_TPS55288>:
extern I2C_HandleTypeDef hi2c3;

const uint8_t AddressesTPS55288[2] = {0x74, 0x75};

I2C_HandleTypeDef *Determine_I2C_Bus_TPS55288(uint8_t Converter_Index)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	uint8_t converter_set = Converter_Index / 2;
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	085b      	lsrs	r3, r3, #1
 800057e:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef *I2C_Line_Address;
	switch (converter_set) {
 8000580:	7afb      	ldrb	r3, [r7, #11]
 8000582:	2b02      	cmp	r3, #2
 8000584:	d00c      	beq.n	80005a0 <Determine_I2C_Bus_TPS55288+0x30>
 8000586:	2b02      	cmp	r3, #2
 8000588:	dc0d      	bgt.n	80005a6 <Determine_I2C_Bus_TPS55288+0x36>
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <Determine_I2C_Bus_TPS55288+0x24>
 800058e:	2b01      	cmp	r3, #1
 8000590:	d003      	beq.n	800059a <Determine_I2C_Bus_TPS55288+0x2a>
 8000592:	e008      	b.n	80005a6 <Determine_I2C_Bus_TPS55288+0x36>
	case 0:
		I2C_Line_Address = &hi2c1;
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <Determine_I2C_Bus_TPS55288+0x44>)
 8000596:	60fb      	str	r3, [r7, #12]
		break;
 8000598:	e005      	b.n	80005a6 <Determine_I2C_Bus_TPS55288+0x36>
	case 1:
		I2C_Line_Address = &hi2c2;
 800059a:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <Determine_I2C_Bus_TPS55288+0x48>)
 800059c:	60fb      	str	r3, [r7, #12]
		break;
 800059e:	e002      	b.n	80005a6 <Determine_I2C_Bus_TPS55288+0x36>
	case 2:
		I2C_Line_Address = &hi2c3;
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <Determine_I2C_Bus_TPS55288+0x4c>)
 80005a2:	60fb      	str	r3, [r7, #12]
		break;
 80005a4:	bf00      	nop
	}
	return I2C_Line_Address;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	20000080 	.word	0x20000080
 80005b8:	200000d4 	.word	0x200000d4
 80005bc:	20000128 	.word	0x20000128

080005c0 <Update_Reference_Voltage_TPS55288>:
		Error_Handler();
	}
}

void Update_Reference_Voltage_TPS55288(uint8_t Converter_Index, uint8_t Increase_Boolean, uint8_t Change_Amount)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	460b      	mov	r3, r1
 80005cc:	71bb      	strb	r3, [r7, #6]
 80005ce:	4613      	mov	r3, r2
 80005d0:	717b      	strb	r3, [r7, #5]
	uint16_t Current_Reference_Voltage = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	82fb      	strh	r3, [r7, #22]
	uint8_t ReadValue = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef HAL_Status;
	ReadValue = ReadByteTPS55288(Converter_Index, REF0, &HAL_Status);
 80005da:	f107 020f 	add.w	r2, r7, #15
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f8b8 	bl	8000758 <ReadByteTPS55288>
 80005e8:	4603      	mov	r3, r0
 80005ea:	757b      	strb	r3, [r7, #21]
	if (HAL_Status != HAL_OK) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <Update_Reference_Voltage_TPS55288+0x36>
		Error_Handler();
 80005f2:	f000 fdf3 	bl	80011dc <Error_Handler>
	}
	Current_Reference_Voltage = Current_Reference_Voltage + ReadValue;
 80005f6:	7d7b      	ldrb	r3, [r7, #21]
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	8afb      	ldrh	r3, [r7, #22]
 80005fc:	4413      	add	r3, r2
 80005fe:	82fb      	strh	r3, [r7, #22]
	ReadValue = ReadByteTPS55288(Converter_Index, REF1, &HAL_Status);
 8000600:	f107 020f 	add.w	r2, r7, #15
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2101      	movs	r1, #1
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f8a5 	bl	8000758 <ReadByteTPS55288>
 800060e:	4603      	mov	r3, r0
 8000610:	757b      	strb	r3, [r7, #21]
	if (HAL_Status != HAL_OK) {
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <Update_Reference_Voltage_TPS55288+0x5c>
		Error_Handler();
 8000618:	f000 fde0 	bl	80011dc <Error_Handler>
	}
	Current_Reference_Voltage = Current_Reference_Voltage + ((ReadValue * REF1MASK) << 8);
 800061c:	7d7b      	ldrb	r3, [r7, #21]
 800061e:	b29b      	uxth	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	0052      	lsls	r2, r2, #1
 8000624:	4413      	add	r3, r2
 8000626:	b29b      	uxth	r3, r3
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	b29a      	uxth	r2, r3
 800062c:	8afb      	ldrh	r3, [r7, #22]
 800062e:	4413      	add	r3, r2
 8000630:	82fb      	strh	r3, [r7, #22]
	uint16_t Next_Reference_Voltage;
	uint8_t Ref1_Write;
	uint8_t Ref0_Write;
	if (Increase_Boolean && Current_Reference_Voltage <= (0x3FF - Change_Amount)) {
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d024      	beq.n	8000682 <Update_Reference_Voltage_TPS55288+0xc2>
 8000638:	8afa      	ldrh	r2, [r7, #22]
 800063a:	797b      	ldrb	r3, [r7, #5]
 800063c:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
 8000640:	3303      	adds	r3, #3
 8000642:	429a      	cmp	r2, r3
 8000644:	dc1d      	bgt.n	8000682 <Update_Reference_Voltage_TPS55288+0xc2>
		Next_Reference_Voltage = Current_Reference_Voltage + Change_Amount;
 8000646:	797b      	ldrb	r3, [r7, #5]
 8000648:	b29a      	uxth	r2, r3
 800064a:	8afb      	ldrh	r3, [r7, #22]
 800064c:	4413      	add	r3, r2
 800064e:	827b      	strh	r3, [r7, #18]
		Ref1_Write = ((Next_Reference_Voltage >> 8) & MASKSTART) + (ReadValue & (~REF1MASK));
 8000650:	8a7b      	ldrh	r3, [r7, #18]
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	b29b      	uxth	r3, r3
 8000656:	b2da      	uxtb	r2, r3
 8000658:	7d7b      	ldrb	r3, [r7, #21]
 800065a:	f023 0303 	bic.w	r3, r3, #3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4413      	add	r3, r2
 8000662:	747b      	strb	r3, [r7, #17]
		Ref0_Write = Next_Reference_Voltage & MASKSTART;
 8000664:	8a7b      	ldrh	r3, [r7, #18]
 8000666:	743b      	strb	r3, [r7, #16]
		WriteByteTPS55288(Converter_Index, REF0, Ref0_Write);
 8000668:	7c3a      	ldrb	r2, [r7, #16]
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f830 	bl	80006d4 <WriteByteTPS55288>
		WriteByteTPS55288(Converter_Index, REF1, Ref1_Write);
 8000674:	7c7a      	ldrb	r2, [r7, #17]
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f82a 	bl	80006d4 <WriteByteTPS55288>
		Ref1_Write = ((Next_Reference_Voltage >> 8) & MASKSTART) + (ReadValue & (~REF1MASK));
		Ref0_Write = Next_Reference_Voltage & MASKSTART;
		WriteByteTPS55288(Converter_Index, REF0, Ref0_Write);
		WriteByteTPS55288(Converter_Index, REF1, Ref1_Write);
	}
}
 8000680:	e024      	b.n	80006cc <Update_Reference_Voltage_TPS55288+0x10c>
	else if ((!Increase_Boolean) && Current_Reference_Voltage >= Change_Amount) {
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d121      	bne.n	80006cc <Update_Reference_Voltage_TPS55288+0x10c>
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	b29b      	uxth	r3, r3
 800068c:	8afa      	ldrh	r2, [r7, #22]
 800068e:	429a      	cmp	r2, r3
 8000690:	d31c      	bcc.n	80006cc <Update_Reference_Voltage_TPS55288+0x10c>
		Next_Reference_Voltage = Current_Reference_Voltage - Change_Amount;
 8000692:	797b      	ldrb	r3, [r7, #5]
 8000694:	b29b      	uxth	r3, r3
 8000696:	8afa      	ldrh	r2, [r7, #22]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	827b      	strh	r3, [r7, #18]
		Ref1_Write = ((Next_Reference_Voltage >> 8) & MASKSTART) + (ReadValue & (~REF1MASK));
 800069c:	8a7b      	ldrh	r3, [r7, #18]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	7d7b      	ldrb	r3, [r7, #21]
 80006a6:	f023 0303 	bic.w	r3, r3, #3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	747b      	strb	r3, [r7, #17]
		Ref0_Write = Next_Reference_Voltage & MASKSTART;
 80006b0:	8a7b      	ldrh	r3, [r7, #18]
 80006b2:	743b      	strb	r3, [r7, #16]
		WriteByteTPS55288(Converter_Index, REF0, Ref0_Write);
 80006b4:	7c3a      	ldrb	r2, [r7, #16]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f80a 	bl	80006d4 <WriteByteTPS55288>
		WriteByteTPS55288(Converter_Index, REF1, Ref1_Write);
 80006c0:	7c7a      	ldrb	r2, [r7, #17]
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f804 	bl	80006d4 <WriteByteTPS55288>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <WriteByteTPS55288>:
	WriteByteTPS55288(Converter_Index, REF0, Ref0_Write);
	WriteByteTPS55288(Converter_Index, REF1, Ref1_Write);
}

HAL_StatusTypeDef WriteByteTPS55288(uint8_t Converter_Index, uint8_t Register_Address, uint8_t WriteData)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af02      	add	r7, sp, #8
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	460b      	mov	r3, r1
 80006e0:	71bb      	strb	r3, [r7, #6]
 80006e2:	4613      	mov	r3, r2
 80006e4:	717b      	strb	r3, [r7, #5]
	uint8_t address_type = Converter_Index % 2;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	75fb      	strb	r3, [r7, #23]
	I2C_HandleTypeDef *I2C_Line_Address = Determine_I2C_Bus_TPS55288(Converter_Index);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff3d 	bl	8000570 <Determine_I2C_Bus_TPS55288>
 80006f6:	6138      	str	r0, [r7, #16]
	uint8_t Device_Address = AddressesTPS55288[address_type];
 80006f8:	7dfb      	ldrb	r3, [r7, #23]
 80006fa:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <WriteByteTPS55288+0x80>)
 80006fc:	5cd3      	ldrb	r3, [r2, r3]
 80006fe:	73fb      	strb	r3, [r7, #15]
	uint8_t BytesToSend[2];
	BytesToSend[0] = Register_Address;
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	733b      	strb	r3, [r7, #12]
	BytesToSend[1] = WriteData;
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	73bb      	strb	r3, [r7, #14]
	HAL_Status = HAL_I2C_Master_Transmit(I2C_Line_Address, Device_Address, BytesToSend, 2, HAL_MAX_DELAY);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b299      	uxth	r1, r3
 8000710:	f107 020c 	add.w	r2, r7, #12
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2302      	movs	r3, #2
 800071c:	6938      	ldr	r0, [r7, #16]
 800071e:	f001 fee3 	bl	80024e8 <HAL_I2C_Master_Transmit>
 8000722:	4603      	mov	r3, r0
 8000724:	73bb      	strb	r3, [r7, #14]
	if (HAL_Status != HAL_OK) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <WriteByteTPS55288+0x5c>
		return HAL_Status;
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	e00c      	b.n	800074a <WriteByteTPS55288+0x76>
//		Error_Handler();
	}
	while (HAL_I2C_IsDeviceReady(I2C_Line_Address, Device_Address, 1, HAL_MAX_DELAY));
 8000730:	bf00      	nop
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	b299      	uxth	r1, r3
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	2201      	movs	r2, #1
 800073c:	6938      	ldr	r0, [r7, #16]
 800073e:	f002 fa03 	bl	8002b48 <HAL_I2C_IsDeviceReady>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f4      	bne.n	8000732 <WriteByteTPS55288+0x5e>
	return HAL_Status;
 8000748:	7bbb      	ldrb	r3, [r7, #14]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	080057a4 	.word	0x080057a4

08000758 <ReadByteTPS55288>:

uint8_t ReadByteTPS55288(uint8_t Converter_Index, uint8_t Register_Address, HAL_StatusTypeDef *Error_Handling)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af02      	add	r7, sp, #8
 800075e:	4603      	mov	r3, r0
 8000760:	603a      	str	r2, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	460b      	mov	r3, r1
 8000766:	71bb      	strb	r3, [r7, #6]
	uint8_t ReturnValue = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	73bb      	strb	r3, [r7, #14]
	uint8_t address_type = Converter_Index % 2;
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	75fb      	strb	r3, [r7, #23]
	I2C_HandleTypeDef *I2C_Line_Address = Determine_I2C_Bus_TPS55288(Converter_Index);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fefa 	bl	8000570 <Determine_I2C_Bus_TPS55288>
 800077c:	6138      	str	r0, [r7, #16]
	uint8_t Device_Address = AddressesTPS55288[address_type];
 800077e:	7dfb      	ldrb	r3, [r7, #23]
 8000780:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <ReadByteTPS55288+0x78>)
 8000782:	5cd3      	ldrb	r3, [r2, r3]
 8000784:	73fb      	strb	r3, [r7, #15]
	uint8_t BytesToSend[1];
	BytesToSend[0] = Register_Address;
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	733b      	strb	r3, [r7, #12]
	*Error_Handling = HAL_I2C_Master_Transmit(I2C_Line_Address, Device_Address, BytesToSend, 1, HAL_MAX_DELAY);
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	b299      	uxth	r1, r3
 800078e:	f107 020c 	add.w	r2, r7, #12
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2301      	movs	r3, #1
 800079a:	6938      	ldr	r0, [r7, #16]
 800079c:	f001 fea4 	bl	80024e8 <HAL_I2C_Master_Transmit>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	701a      	strb	r2, [r3, #0]
	*Error_Handling = HAL_I2C_Master_Receive(I2C_Line_Address, Device_Address, &ReturnValue, 1, HAL_MAX_DELAY);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	b299      	uxth	r1, r3
 80007ac:	f107 020e 	add.w	r2, r7, #14
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	6938      	ldr	r0, [r7, #16]
 80007ba:	f001 ff93 	bl	80026e4 <HAL_I2C_Master_Receive>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	701a      	strb	r2, [r3, #0]
	return ReturnValue;
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	080057a4 	.word	0x080057a4

080007d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <MX_GPIO_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a16      	ldr	r2, [pc, #88]	@ (800083c <MX_GPIO_Init+0x68>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_GPIO_Init+0x68>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_GPIO_Init+0x68>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a0f      	ldr	r2, [pc, #60]	@ (800083c <MX_GPIO_Init+0x68>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <MX_GPIO_Init+0x68>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_GPIO_Init+0x68>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a08      	ldr	r2, [pc, #32]	@ (800083c <MX_GPIO_Init+0x68>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_GPIO_Init+0x68>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <Initialize_HillClimbing>:
#include "hillclimbing.h"

uint32_t Converter_Number_HC = 0;

void Initialize_HillClimbing(uint32_t Number_of_Converters, SolarPanel *SolarPanels)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	Converter_Number_HC = Number_of_Converters;
 800084a:	4a2c      	ldr	r2, [pc, #176]	@ (80008fc <Initialize_HillClimbing+0xbc>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6013      	str	r3, [r2, #0]
	float Voltage;
	float Current;
	for (int i = 0; i < Converter_Number_HC; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e047      	b.n	80008e6 <Initialize_HillClimbing+0xa6>
		Get_Sensor_Values_for_Panel_hc(i, &Voltage, &Current);
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f107 020c 	add.w	r2, r7, #12
 800085e:	f107 0110 	add.w	r1, r7, #16
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f84c 	bl	8000900 <Get_Sensor_Values_for_Panel_hc>
		SolarPanels[i].Current_Current = Current;
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	4613      	mov	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4413      	add	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	461a      	mov	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	4413      	add	r3, r2
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	60da      	str	r2, [r3, #12]
		SolarPanels[i].Current_Voltage = Voltage;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	461a      	mov	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	4413      	add	r3, r2
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	605a      	str	r2, [r3, #4]
		SolarPanels[i].Previous_Current = Current;
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	461a      	mov	r2, r3
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	609a      	str	r2, [r3, #8]
		SolarPanels[i].Previous_Voltage = Voltage;
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	461a      	mov	r2, r3
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	601a      	str	r2, [r3, #0]
		SolarPanels[i].Shading_Conditions = NOT_SHADED;
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	4613      	mov	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	461a      	mov	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	2200      	movs	r2, #0
 80008ca:	741a      	strb	r2, [r3, #16]
		SolarPanels[i].At_MPP = NOT_AT_MPP;
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	461a      	mov	r2, r3
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	2200      	movs	r2, #0
 80008de:	745a      	strb	r2, [r3, #17]
	for (int i = 0; i < Converter_Number_HC; i++) {
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3301      	adds	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <Initialize_HillClimbing+0xbc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3b2      	bcc.n	8000856 <Initialize_HillClimbing+0x16>
	}
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000007c 	.word	0x2000007c

08000900 <Get_Sensor_Values_for_Panel_hc>:

void Get_Sensor_Values_for_Panel_hc(uint8_t Converter_Index, float *Voltage, float *Current)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	73fb      	strb	r3, [r7, #15]
	Read_Sensor_ValuesACS37800(Converter_Index, Voltage, Current);
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	68b9      	ldr	r1, [r7, #8]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fea5 	bl	8001664 <Read_Sensor_ValuesACS37800>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <Calculate_Power_hc>:

float Calculate_Power_hc(float Voltage, float Current)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	ed87 0a01 	vstr	s0, [r7, #4]
 800092c:	edc7 0a00 	vstr	s1, [r7]
	return Voltage * Current;
 8000930:	ed97 7a01 	vldr	s14, [r7, #4]
 8000934:	edd7 7a00 	vldr	s15, [r7]
 8000938:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800093c:	eeb0 0a67 	vmov.f32	s0, s15
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <Change_Panel_Values_hc>:
	}
	return Total_Current / Converter_Number_HC;
}

void Change_Panel_Values_hc(uint8_t Converter_Index, uint8_t Increase, uint8_t Change_Amount)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	460b      	mov	r3, r1
 8000956:	71bb      	strb	r3, [r7, #6]
 8000958:	4613      	mov	r3, r2
 800095a:	717b      	strb	r3, [r7, #5]
	Update_Reference_Voltage_TPS55288(Converter_Index, Increase, Change_Amount);
 800095c:	797a      	ldrb	r2, [r7, #5]
 800095e:	79b9      	ldrb	r1, [r7, #6]
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fe2c 	bl	80005c0 <Update_Reference_Voltage_TPS55288>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <Update_Panel_Parameters_hc>:

void Update_Panel_Parameters_hc(uint8_t Converter_Index, float New_Voltage, float New_Current, uint8_t At_mpp, uint8_t Partially_shaded, SolarPanel *SolarPanels)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	ed87 0a02 	vstr	s0, [r7, #8]
 800097a:	edc7 0a01 	vstr	s1, [r7, #4]
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	4603      	mov	r3, r0
 8000982:	73fb      	strb	r3, [r7, #15]
 8000984:	460b      	mov	r3, r1
 8000986:	73bb      	strb	r3, [r7, #14]
 8000988:	4613      	mov	r3, r2
 800098a:	737b      	strb	r3, [r7, #13]
	SolarPanels[Converter_Index].Previous_Current = SolarPanels[Converter_Index].Current_Current;
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	461a      	mov	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	1899      	adds	r1, r3, r2
 800099c:	7bfa      	ldrb	r2, [r7, #15]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	461a      	mov	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	68ca      	ldr	r2, [r1, #12]
 80009ae:	609a      	str	r2, [r3, #8]
	SolarPanels[Converter_Index].Previous_Voltage = SolarPanels[Converter_Index].Current_Voltage;
 80009b0:	7bfa      	ldrb	r2, [r7, #15]
 80009b2:	4613      	mov	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	461a      	mov	r2, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	1899      	adds	r1, r3, r2
 80009c0:	7bfa      	ldrb	r2, [r7, #15]
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	461a      	mov	r2, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	684a      	ldr	r2, [r1, #4]
 80009d2:	601a      	str	r2, [r3, #0]
	SolarPanels[Converter_Index].Current_Current = New_Current;
 80009d4:	7bfa      	ldrb	r2, [r7, #15]
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	461a      	mov	r2, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	60da      	str	r2, [r3, #12]
	SolarPanels[Converter_Index].Current_Voltage = New_Voltage;
 80009e8:	7bfa      	ldrb	r2, [r7, #15]
 80009ea:	4613      	mov	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	461a      	mov	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	605a      	str	r2, [r3, #4]
	SolarPanels[Converter_Index].Shading_Conditions = Partially_shaded;
 80009fc:	7bfa      	ldrb	r2, [r7, #15]
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	461a      	mov	r2, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	7b7a      	ldrb	r2, [r7, #13]
 8000a0e:	741a      	strb	r2, [r3, #16]
	SolarPanels[Converter_Index].At_MPP = At_mpp;
 8000a10:	7bfa      	ldrb	r2, [r7, #15]
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	7bba      	ldrb	r2, [r7, #14]
 8000a22:	745a      	strb	r2, [r3, #17]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <Update_Panel_State_hc>:
	}
	return 1;
}

void Update_Panel_State_hc(uint8_t Converter_Index, SolarPanel *SolarPanels)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
	float Previous_Voltage = SolarPanels[Converter_Index].Current_Voltage;
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	461a      	mov	r2, r3
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	623b      	str	r3, [r7, #32]
	float Previous_Current = SolarPanels[Converter_Index].Current_Current;
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	61fb      	str	r3, [r7, #28]
	float Voltage;
	float Current;
	Get_Sensor_Values_for_Panel_hc(Converter_Index, &Voltage, &Current);
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	f107 0110 	add.w	r1, r7, #16
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff46 	bl	8000900 <Get_Sensor_Values_for_Panel_hc>
	float Power = Calculate_Power_hc(Voltage, Current);
 8000a74:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a78:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a7c:	eef0 0a47 	vmov.f32	s1, s14
 8000a80:	eeb0 0a67 	vmov.f32	s0, s15
 8000a84:	f7ff ff4d 	bl	8000922 <Calculate_Power_hc>
 8000a88:	ed87 0a06 	vstr	s0, [r7, #24]
	float Previous_Power = Calculate_Power_hc(Previous_Voltage, Previous_Current);
 8000a8c:	edd7 0a07 	vldr	s1, [r7, #28]
 8000a90:	ed97 0a08 	vldr	s0, [r7, #32]
 8000a94:	f7ff ff45 	bl	8000922 <Calculate_Power_hc>
 8000a98:	ed87 0a05 	vstr	s0, [r7, #20]
	uint8_t Partially_shaded = SolarPanels[Converter_Index].Shading_Conditions;
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	7c1b      	ldrb	r3, [r3, #16]
 8000aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t At_mpp = SolarPanels[Converter_Index].At_MPP;
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	461a      	mov	r2, r3
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	7c5b      	ldrb	r3, [r3, #17]
 8000ac4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (Partially_shaded) {
 8000ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d018      	beq.n	8000b02 <Update_Panel_State_hc+0xd2>
		if (Voltage - Previous_Voltage > Partial_Shade_Threshold) {
 8000ad0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ad4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000adc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae4:	dd06      	ble.n	8000af4 <Update_Panel_State_hc+0xc4>
			Partially_shaded = NOT_SHADED;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			At_mpp = NOT_AT_MPP;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000af2:	e071      	b.n	8000bd8 <Update_Panel_State_hc+0x1a8>
		}
		else {
			Change_Panel_Values_hc(Converter_Index, INCREASE, 8);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2208      	movs	r2, #8
 8000af8:	2101      	movs	r1, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff25 	bl	800094a <Change_Panel_Values_hc>
 8000b00:	e06a      	b.n	8000bd8 <Update_Panel_State_hc+0x1a8>
				if ((Average_Current - Current) > Current_Threshold) {
					Partially_shaded = SHADED;
				}
			}
		}
		else if (((Power - Previous_Power > 0) && (Voltage - Previous_Voltage) > 0) || ((Power - Previous_Power < 0) && (Voltage - Previous_Voltage) < 0)) {
 8000b02:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b16:	dd0a      	ble.n	8000b2e <Update_Panel_State_hc+0xfe>
 8000b18:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2c:	dc15      	bgt.n	8000b5a <Update_Panel_State_hc+0x12a>
 8000b2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b42:	d514      	bpl.n	8000b6e <Update_Panel_State_hc+0x13e>
 8000b44:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	d509      	bpl.n	8000b6e <Update_Panel_State_hc+0x13e>
			Change_Panel_Values_hc(Converter_Index, INCREASE, 8);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fef2 	bl	800094a <Change_Panel_Values_hc>
			At_mpp = NOT_AT_MPP;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000b6c:	e034      	b.n	8000bd8 <Update_Panel_State_hc+0x1a8>
		}
		else if (((Power - Previous_Power > 0) && (Voltage - Previous_Voltage) < 0) || ((Power - Previous_Power < 0) && (Voltage - Previous_Voltage) > 0)) {
 8000b6e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	dd0a      	ble.n	8000b9a <Update_Panel_State_hc+0x16a>
 8000b84:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b88:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b98:	d415      	bmi.n	8000bc6 <Update_Panel_State_hc+0x196>
 8000b9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bae:	d513      	bpl.n	8000bd8 <Update_Panel_State_hc+0x1a8>
 8000bb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc4:	dd08      	ble.n	8000bd8 <Update_Panel_State_hc+0x1a8>
			Change_Panel_Values_hc(Converter_Index, DECREASE, 8);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2208      	movs	r2, #8
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff febc 	bl	800094a <Change_Panel_Values_hc>
			At_mpp = NOT_AT_MPP;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}
	}
	Update_Panel_Parameters_hc(Converter_Index, Voltage, Current, At_mpp, Partially_shaded, SolarPanels);
 8000bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bdc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000be4:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000be8:	79f8      	ldrb	r0, [r7, #7]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	eef0 0a47 	vmov.f32	s1, s14
 8000bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf4:	f7ff febc 	bl	8000970 <Update_Panel_Parameters_hc>
}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Update_All_Panel_States_hc>:

void Update_All_Panel_States_hc(SolarPanel *SolarPanels)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < Converter_Number_HC; i++) {
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	e008      	b.n	8000c20 <Update_All_Panel_States_hc+0x20>
		Update_Panel_State_hc(i, SolarPanels);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff0b 	bl	8000a30 <Update_Panel_State_hc>
	for (int i = 0; i < Converter_Number_HC; i++) {
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <Update_All_Panel_States_hc+0x34>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3f1      	bcc.n	8000c0e <Update_All_Panel_States_hc+0xe>
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000007c 	.word	0x2000007c

08000c38 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c3e:	4a13      	ldr	r2, [pc, #76]	@ (8000c8c <MX_I2C1_Init+0x54>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c44:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <MX_I2C1_Init+0x58>)
 8000c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c76:	f001 faf3 	bl	8002260 <HAL_I2C_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f000 faac 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000080 	.word	0x20000080
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	000186a0 	.word	0x000186a0

08000c94 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000c9a:	4a13      	ldr	r2, [pc, #76]	@ (8000ce8 <MX_I2C2_Init+0x54>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000ca0:	4a12      	ldr	r2, [pc, #72]	@ (8000cec <MX_I2C2_Init+0x58>)
 8000ca2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000cb2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cb6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_I2C2_Init+0x50>)
 8000cd2:	f001 fac5 	bl	8002260 <HAL_I2C_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cdc:	f000 fa7e 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000d4 	.word	0x200000d4
 8000ce8:	40005800 	.word	0x40005800
 8000cec:	000186a0 	.word	0x000186a0

08000cf0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000cf6:	4a13      	ldr	r2, [pc, #76]	@ (8000d44 <MX_I2C3_Init+0x54>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000cfc:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <MX_I2C3_Init+0x58>)
 8000cfe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000d0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d12:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <MX_I2C3_Init+0x50>)
 8000d2e:	f001 fa97 	bl	8002260 <HAL_I2C_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d38:	f000 fa50 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000128 	.word	0x20000128
 8000d44:	40005c00 	.word	0x40005c00
 8000d48:	000186a0 	.word	0x000186a0

08000d4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	@ 0x38
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a63      	ldr	r2, [pc, #396]	@ (8000ef8 <HAL_I2C_MspInit+0x1ac>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12c      	bne.n	8000dc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
 8000d72:	4b62      	ldr	r3, [pc, #392]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a61      	ldr	r2, [pc, #388]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
 8000d88:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8a:	23c0      	movs	r3, #192	@ 0xc0
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8e:	2312      	movs	r3, #18
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4856      	ldr	r0, [pc, #344]	@ (8000f00 <HAL_I2C_MspInit+0x1b4>)
 8000da6:	f001 f8d7 	bl	8001f58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	4b53      	ldr	r3, [pc, #332]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a52      	ldr	r2, [pc, #328]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000db4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b50      	ldr	r3, [pc, #320]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000dc6:	e093      	b.n	8000ef0 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8000f04 <HAL_I2C_MspInit+0x1b8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d13d      	bne.n	8000e4e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	4b49      	ldr	r3, [pc, #292]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a48      	ldr	r2, [pc, #288]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b46      	ldr	r3, [pc, #280]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df4:	2312      	movs	r3, #18
 8000df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e00:	2304      	movs	r3, #4
 8000e02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	483d      	ldr	r0, [pc, #244]	@ (8000f00 <HAL_I2C_MspInit+0x1b4>)
 8000e0c:	f001 f8a4 	bl	8001f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e10:	2308      	movs	r3, #8
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	2312      	movs	r3, #18
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000e20:	2309      	movs	r3, #9
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4835      	ldr	r0, [pc, #212]	@ (8000f00 <HAL_I2C_MspInit+0x1b4>)
 8000e2c:	f001 f894 	bl	8001f58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	4b31      	ldr	r3, [pc, #196]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a30      	ldr	r2, [pc, #192]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000e3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b2e      	ldr	r3, [pc, #184]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
}
 8000e4c:	e050      	b.n	8000ef0 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a2d      	ldr	r2, [pc, #180]	@ (8000f08 <HAL_I2C_MspInit+0x1bc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d14b      	bne.n	8000ef0 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a26      	ldr	r2, [pc, #152]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e96:	2312      	movs	r3, #18
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <HAL_I2C_MspInit+0x1c0>)
 8000eae:	f001 f853 	bl	8001f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb8:	2312      	movs	r3, #18
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4810      	ldr	r0, [pc, #64]	@ (8000f10 <HAL_I2C_MspInit+0x1c4>)
 8000ed0:	f001 f842 	bl	8001f58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000ede:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ee2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <HAL_I2C_MspInit+0x1b0>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	3738      	adds	r7, #56	@ 0x38
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40005800 	.word	0x40005800
 8000f08:	40005c00 	.word	0x40005c00
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020000 	.word	0x40020000

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	@ 0x30
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t Single_Converter_Index = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 fde0 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f864 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f7ff fc54 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f2c:	f000 fcf6 	bl	800191c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f30:	f7ff fe82 	bl	8000c38 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f34:	f7ff feae 	bl	8000c94 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000f38:	f7ff feda 	bl	8000cf0 <MX_I2C3_Init>

	  }
	  while (1);
  }
  else {
	  sprintf((char *)OutputBuffer, "Communication Started\r\n");
 8000f3c:	4923      	ldr	r1, [pc, #140]	@ (8000fcc <main+0xb8>)
 8000f3e:	4824      	ldr	r0, [pc, #144]	@ (8000fd0 <main+0xbc>)
 8000f40:	f003 ff64 	bl	8004e0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8000f44:	4822      	ldr	r0, [pc, #136]	@ (8000fd0 <main+0xbc>)
 8000f46:	f000 fd7d 	bl	8001a44 <PrintOutputBuffer>
	  sprintf((char *)OutputBuffer, "Receiving Character\r\n");
 8000f4a:	4922      	ldr	r1, [pc, #136]	@ (8000fd4 <main+0xc0>)
 8000f4c:	4820      	ldr	r0, [pc, #128]	@ (8000fd0 <main+0xbc>)
 8000f4e:	f003 ff5d 	bl	8004e0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8000f52:	481f      	ldr	r0, [pc, #124]	@ (8000fd0 <main+0xbc>)
 8000f54:	f000 fd76 	bl	8001a44 <PrintOutputBuffer>
	  HAL_Status = HAL_UART_Receive_IT(&huart2, &ReceiveCharacter, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	491f      	ldr	r1, [pc, #124]	@ (8000fd8 <main+0xc4>)
 8000f5c:	481f      	ldr	r0, [pc, #124]	@ (8000fdc <main+0xc8>)
 8000f5e:	f002 ffda 	bl	8003f16 <HAL_UART_Receive_IT>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <main+0xcc>)
 8000f68:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Interrupt_Occurred) {
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <main+0xd0>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d012      	beq.n	8000f98 <main+0x84>
	  	  Interrupt_Occurred = 0;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <main+0xd0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	  	  HAL_Status = HAL_UART_Receive_IT(&huart2, &ReceiveCharacter, 1);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4917      	ldr	r1, [pc, #92]	@ (8000fd8 <main+0xc4>)
 8000f7c:	4817      	ldr	r0, [pc, #92]	@ (8000fdc <main+0xc8>)
 8000f7e:	f002 ffca 	bl	8003f16 <HAL_UART_Receive_IT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <main+0xcc>)
 8000f88:	701a      	strb	r2, [r3, #0]
	  	  if (Current_Mode == SWEEP_PANELS) {
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <main+0xd4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d102      	bne.n	8000f98 <main+0x84>
	  		  Increase_Converter_Reference_Voltage(8);
 8000f92:	2008      	movs	r0, #8
 8000f94:	f000 fc5a 	bl	800184c <Increase_Converter_Reference_Voltage>
	  	  }
	  }
	  switch (Current_Mode) {
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <main+0xd4>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d00e      	beq.n	8000fbe <main+0xaa>
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	dc0d      	bgt.n	8000fc0 <main+0xac>
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d002      	beq.n	8000fae <main+0x9a>
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d004      	beq.n	8000fb6 <main+0xa2>
 8000fac:	e008      	b.n	8000fc0 <main+0xac>
		  case PERTURB_AND_OBSERVE:
			  Update_All_Panel_States_po(SolarPanelsMain);
 8000fae:	480f      	ldr	r0, [pc, #60]	@ (8000fec <main+0xd8>)
 8000fb0:	f000 fa9a 	bl	80014e8 <Update_All_Panel_States_po>
			  break;
 8000fb4:	e004      	b.n	8000fc0 <main+0xac>
		  case HILL_CLIMBING:
			  Update_All_Panel_States_hc(SolarPanelsMain);
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <main+0xd8>)
 8000fb8:	f7ff fe22 	bl	8000c00 <Update_All_Panel_States_hc>
			  break;
 8000fbc:	e000      	b.n	8000fc0 <main+0xac>
		  case SMART_ALGORITHM:

			  break;
 8000fbe:	bf00      	nop
	  }
	  HAL_Delay(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fc4:	f000 fe00 	bl	8001bc8 <HAL_Delay>
	  if (Interrupt_Occurred) {
 8000fc8:	e7cf      	b.n	8000f6a <main+0x56>
 8000fca:	bf00      	nop
 8000fcc:	08005764 	.word	0x08005764
 8000fd0:	20000180 	.word	0x20000180
 8000fd4:	0800577c 	.word	0x0800577c
 8000fd8:	2000017c 	.word	0x2000017c
 8000fdc:	20000224 	.word	0x20000224
 8000fe0:	20000201 	.word	0x20000201
 8000fe4:	20000200 	.word	0x20000200
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000204 	.word	0x20000204

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	@ 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	@ 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 ff24 	bl	8004e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <SystemClock_Config+0xb8>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	4a22      	ldr	r2, [pc, #136]	@ (80010a8 <SystemClock_Config+0xb8>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	@ 0x40
 8001024:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <SystemClock_Config+0xb8>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <SystemClock_Config+0xbc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800103c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ac <SystemClock_Config+0xbc>)
 800103e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <SystemClock_Config+0xbc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001058:	2310      	movs	r3, #16
 800105a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fa23 	bl	80034b0 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001070:	f000 f8b4 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fc86 	bl	80039a0 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800109a:	f000 f89f 	bl	80011dc <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	@ 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000

080010b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if (TESTING_MODE) return;
  Interrupt_Occurred = 1;
 80010b8:	4b3b      	ldr	r3, [pc, #236]	@ (80011a8 <HAL_UART_RxCpltCallback+0xf8>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
  HAL_Status = HAL_UART_Receive_IT(&huart2, &ReceiveCharacter, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	493a      	ldr	r1, [pc, #232]	@ (80011ac <HAL_UART_RxCpltCallback+0xfc>)
 80010c2:	483b      	ldr	r0, [pc, #236]	@ (80011b0 <HAL_UART_RxCpltCallback+0x100>)
 80010c4:	f002 ff27 	bl	8003f16 <HAL_UART_Receive_IT>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b39      	ldr	r3, [pc, #228]	@ (80011b4 <HAL_UART_RxCpltCallback+0x104>)
 80010ce:	701a      	strb	r2, [r3, #0]
  if (ReceiveCharacter == '0') {
 80010d0:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <HAL_UART_RxCpltCallback+0xfc>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b30      	cmp	r3, #48	@ 0x30
 80010d6:	d125      	bne.n	8001124 <HAL_UART_RxCpltCallback+0x74>
	  float Voltage;
	  float Current;
	  float Power;
//	  Read_Sensor_ValuesACS37800(NUMBER_OF_CONVERTERS - 1, &Voltage, &Current);
	  Get_Sensor_Values_for_Panel_hc_test(NUMBER_OF_CONVERTERS - 1, &Voltage, &Current);
 80010d8:	f107 0210 	add.w	r2, r7, #16
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 faa6 	bl	8001634 <Get_Sensor_Values_for_Panel_hc_test>
//	  Voltage = 20;
//	  Current = 30;
	  Power = Calculate_Power_hc(Voltage, Current);
 80010e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80010f0:	eef0 0a47 	vmov.f32	s1, s14
 80010f4:	eeb0 0a67 	vmov.f32	s0, s15
 80010f8:	f7ff fc13 	bl	8000922 <Calculate_Power_hc>
 80010fc:	eef0 7a40 	vmov.f32	s15, s0
 8001100:	edc7 7a03 	vstr	s15, [r7, #12]
	  memcpy(OutputBuffer, &Voltage, 4);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	4a2c      	ldr	r2, [pc, #176]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 8001108:	6013      	str	r3, [r2, #0]
	  memcpy(OutputBuffer + 4, &Current, 4);
 800110a:	4a2c      	ldr	r2, [pc, #176]	@ (80011bc <HAL_UART_RxCpltCallback+0x10c>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	6013      	str	r3, [r2, #0]
	  memcpy(OutputBuffer + 8, &Power, 4);
 8001110:	4a2b      	ldr	r2, [pc, #172]	@ (80011c0 <HAL_UART_RxCpltCallback+0x110>)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6013      	str	r3, [r2, #0]
	  OutputBuffer[DATALENGTH] = '\0';
 8001116:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 8001118:	2200      	movs	r2, #0
 800111a:	731a      	strb	r2, [r3, #12]
	  PrintOutputData(OutputBuffer);
 800111c:	4826      	ldr	r0, [pc, #152]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 800111e:	f000 fc79 	bl	8001a14 <PrintOutputData>
 8001122:	e03e      	b.n	80011a2 <HAL_UART_RxCpltCallback+0xf2>
  }
  else if (ReceiveCharacter == '1') {
 8001124:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <HAL_UART_RxCpltCallback+0xfc>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b31      	cmp	r3, #49	@ 0x31
 800112a:	d10a      	bne.n	8001142 <HAL_UART_RxCpltCallback+0x92>
	  sprintf((char *)OutputBuffer, "P&O");
 800112c:	4925      	ldr	r1, [pc, #148]	@ (80011c4 <HAL_UART_RxCpltCallback+0x114>)
 800112e:	4822      	ldr	r0, [pc, #136]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 8001130:	f003 fe6c 	bl	8004e0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8001134:	4820      	ldr	r0, [pc, #128]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 8001136:	f000 fc85 	bl	8001a44 <PrintOutputBuffer>
	  Current_Mode = PERTURB_AND_OBSERVE;
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <HAL_UART_RxCpltCallback+0x118>)
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e02f      	b.n	80011a2 <HAL_UART_RxCpltCallback+0xf2>
//	  Initialize_PerturbAndObserve(NUMBER_OF_CONVERTERS, SolarPanels);
  }
  else if (ReceiveCharacter == '2') {
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <HAL_UART_RxCpltCallback+0xfc>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b32      	cmp	r3, #50	@ 0x32
 8001148:	d10e      	bne.n	8001168 <HAL_UART_RxCpltCallback+0xb8>
	  sprintf((char *)OutputBuffer, "HC");
 800114a:	4920      	ldr	r1, [pc, #128]	@ (80011cc <HAL_UART_RxCpltCallback+0x11c>)
 800114c:	481a      	ldr	r0, [pc, #104]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 800114e:	f003 fe5d 	bl	8004e0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8001152:	4819      	ldr	r0, [pc, #100]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 8001154:	f000 fc76 	bl	8001a44 <PrintOutputBuffer>
	  Current_Mode = HILL_CLIMBING;
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <HAL_UART_RxCpltCallback+0x118>)
 800115a:	2202      	movs	r2, #2
 800115c:	701a      	strb	r2, [r3, #0]
	  Initialize_HillClimbing(NUMBER_OF_CONVERTERS, SolarPanelsMain);
 800115e:	491c      	ldr	r1, [pc, #112]	@ (80011d0 <HAL_UART_RxCpltCallback+0x120>)
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff fb6d 	bl	8000840 <Initialize_HillClimbing>
 8001166:	e01c      	b.n	80011a2 <HAL_UART_RxCpltCallback+0xf2>
  }
  else if (ReceiveCharacter == '3') {
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <HAL_UART_RxCpltCallback+0xfc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b33      	cmp	r3, #51	@ 0x33
 800116e:	d10a      	bne.n	8001186 <HAL_UART_RxCpltCallback+0xd6>
	  sprintf((char *)OutputBuffer, "SA");
 8001170:	4918      	ldr	r1, [pc, #96]	@ (80011d4 <HAL_UART_RxCpltCallback+0x124>)
 8001172:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 8001174:	f003 fe4a 	bl	8004e0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8001178:	480f      	ldr	r0, [pc, #60]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 800117a:	f000 fc63 	bl	8001a44 <PrintOutputBuffer>
	  Current_Mode = SMART_ALGORITHM;
 800117e:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_UART_RxCpltCallback+0x118>)
 8001180:	2203      	movs	r2, #3
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e00d      	b.n	80011a2 <HAL_UART_RxCpltCallback+0xf2>

  }
  else if (ReceiveCharacter == '4') {
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <HAL_UART_RxCpltCallback+0xfc>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b34      	cmp	r3, #52	@ 0x34
 800118c:	d109      	bne.n	80011a2 <HAL_UART_RxCpltCallback+0xf2>
	  sprintf((char *)OutputBuffer, "PS");
 800118e:	4912      	ldr	r1, [pc, #72]	@ (80011d8 <HAL_UART_RxCpltCallback+0x128>)
 8001190:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 8001192:	f003 fe3b 	bl	8004e0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8001196:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <HAL_UART_RxCpltCallback+0x108>)
 8001198:	f000 fc54 	bl	8001a44 <PrintOutputBuffer>
	  Current_Mode = SWEEP_PANELS;
 800119c:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_UART_RxCpltCallback+0x118>)
 800119e:	2204      	movs	r2, #4
 80011a0:	701a      	strb	r2, [r3, #0]
//	  Reset_Converters(NUMBER_OF_CONVERTERS);
  }
}
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000200 	.word	0x20000200
 80011ac:	2000017c 	.word	0x2000017c
 80011b0:	20000224 	.word	0x20000224
 80011b4:	20000201 	.word	0x20000201
 80011b8:	20000180 	.word	0x20000180
 80011bc:	20000184 	.word	0x20000184
 80011c0:	20000188 	.word	0x20000188
 80011c4:	08005794 	.word	0x08005794
 80011c8:	20000000 	.word	0x20000000
 80011cc:	08005798 	.word	0x08005798
 80011d0:	20000204 	.word	0x20000204
 80011d4:	0800579c 	.word	0x0800579c
 80011d8:	080057a0 	.word	0x080057a0

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <Error_Handler+0x8>

080011e8 <Get_Sensor_Values_for_Panel_po>:
		SolarPanels[i].At_MPP = NOT_AT_MPP;
	}
}

void Get_Sensor_Values_for_Panel_po(uint8_t Converter_Index, float *Voltage, float *Current)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	73fb      	strb	r3, [r7, #15]
	Read_Sensor_ValuesACS37800(Converter_Index, Voltage, Current);
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fa31 	bl	8001664 <Read_Sensor_ValuesACS37800>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <Calculate_Power_po>:

float Calculate_Power_po(float Voltage, float Current)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	ed87 0a01 	vstr	s0, [r7, #4]
 8001214:	edc7 0a00 	vstr	s1, [r7]
	return Voltage * Current;
 8001218:	ed97 7a01 	vldr	s14, [r7, #4]
 800121c:	edd7 7a00 	vldr	s15, [r7]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <Change_Panel_Values_po>:
	}
	return Total_Current / Converter_Number_PO;
}

void Change_Panel_Values_po(uint8_t Converter_Index, uint8_t Increase, uint8_t Change_Amount)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	460b      	mov	r3, r1
 800123e:	71bb      	strb	r3, [r7, #6]
 8001240:	4613      	mov	r3, r2
 8001242:	717b      	strb	r3, [r7, #5]
	Update_Reference_Voltage_TPS55288(Converter_Index, Increase, Change_Amount);
 8001244:	797a      	ldrb	r2, [r7, #5]
 8001246:	79b9      	ldrb	r1, [r7, #6]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f9b8 	bl	80005c0 <Update_Reference_Voltage_TPS55288>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <Update_Panel_Parameters_po>:

void Update_Panel_Parameters_po(uint8_t Converter_Index, float New_Voltage, float New_Current, uint8_t At_mpp, uint8_t Partially_shaded, SolarPanel *SolarPanels)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001262:	edc7 0a01 	vstr	s1, [r7, #4]
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	460b      	mov	r3, r1
 800126e:	73bb      	strb	r3, [r7, #14]
 8001270:	4613      	mov	r3, r2
 8001272:	737b      	strb	r3, [r7, #13]
	SolarPanels[Converter_Index].Previous_Current = SolarPanels[Converter_Index].Current_Current;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	461a      	mov	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	1899      	adds	r1, r3, r2
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	461a      	mov	r2, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4413      	add	r3, r2
 8001294:	68ca      	ldr	r2, [r1, #12]
 8001296:	609a      	str	r2, [r3, #8]
	SolarPanels[Converter_Index].Previous_Voltage = SolarPanels[Converter_Index].Current_Voltage;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	461a      	mov	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	1899      	adds	r1, r3, r2
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	461a      	mov	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	684a      	ldr	r2, [r1, #4]
 80012ba:	601a      	str	r2, [r3, #0]
	SolarPanels[Converter_Index].Current_Current = New_Current;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	461a      	mov	r2, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	60da      	str	r2, [r3, #12]
	SolarPanels[Converter_Index].Current_Voltage = New_Voltage;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	461a      	mov	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	605a      	str	r2, [r3, #4]
	SolarPanels[Converter_Index].Shading_Conditions = Partially_shaded;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	461a      	mov	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	7b7a      	ldrb	r2, [r7, #13]
 80012f6:	741a      	strb	r2, [r3, #16]
	SolarPanels[Converter_Index].At_MPP = At_mpp;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	461a      	mov	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	7bba      	ldrb	r2, [r7, #14]
 800130a:	745a      	strb	r2, [r3, #17]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <Update_Panel_State_po>:
	}
	return 1;
}

void Update_Panel_State_po(uint8_t Converter_Index, SolarPanel *SolarPanels)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
	float Previous_Voltage = SolarPanels[Converter_Index].Current_Voltage;
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	461a      	mov	r2, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	623b      	str	r3, [r7, #32]
	float Previous_Current = SolarPanels[Converter_Index].Current_Current;
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	461a      	mov	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	61fb      	str	r3, [r7, #28]
	float Voltage;
	float Current;
	Get_Sensor_Values_for_Panel_po(Converter_Index, &Voltage, &Current);
 800134c:	f107 020c 	add.w	r2, r7, #12
 8001350:	f107 0110 	add.w	r1, r7, #16
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff46 	bl	80011e8 <Get_Sensor_Values_for_Panel_po>
	float Power = Calculate_Power_po(Voltage, Current);
 800135c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001360:	ed97 7a03 	vldr	s14, [r7, #12]
 8001364:	eef0 0a47 	vmov.f32	s1, s14
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	f7ff ff4d 	bl	800120a <Calculate_Power_po>
 8001370:	ed87 0a06 	vstr	s0, [r7, #24]
	float Previous_Power = Calculate_Power_po(Previous_Voltage, Previous_Current);
 8001374:	edd7 0a07 	vldr	s1, [r7, #28]
 8001378:	ed97 0a08 	vldr	s0, [r7, #32]
 800137c:	f7ff ff45 	bl	800120a <Calculate_Power_po>
 8001380:	ed87 0a05 	vstr	s0, [r7, #20]
	uint8_t Partially_shaded = SolarPanels[Converter_Index].Shading_Conditions;
 8001384:	79fa      	ldrb	r2, [r7, #7]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	461a      	mov	r2, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4413      	add	r3, r2
 8001394:	7c1b      	ldrb	r3, [r3, #16]
 8001396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t At_mpp = SolarPanels[Converter_Index].At_MPP;
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	461a      	mov	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	7c5b      	ldrb	r3, [r3, #17]
 80013ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (Partially_shaded) {
 80013b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d018      	beq.n	80013ea <Update_Panel_State_po+0xd2>
		if (Voltage - Previous_Voltage > Partial_Shade_Threshold) {
 80013b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80013bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	dd06      	ble.n	80013dc <Update_Panel_State_po+0xc4>
			Partially_shaded = NOT_SHADED;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			At_mpp = NOT_AT_MPP;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80013da:	e071      	b.n	80014c0 <Update_Panel_State_po+0x1a8>
		}
		else {
			Change_Panel_Values_po(Converter_Index, INCREASE, 8);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	2208      	movs	r2, #8
 80013e0:	2101      	movs	r1, #1
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff25 	bl	8001232 <Change_Panel_Values_po>
 80013e8:	e06a      	b.n	80014c0 <Update_Panel_State_po+0x1a8>
				if ((Average_Current - Current) > Current_Threshold) {
					Partially_shaded = SHADED;
				}
			}
		}
		else if (((Power - Previous_Power > 0) && (Voltage - Previous_Voltage) > 0) || ((Power - Previous_Power < 0) && (Voltage - Previous_Voltage) < 0)) {
 80013ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80013ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80013f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	dd0a      	ble.n	8001416 <Update_Panel_State_po+0xfe>
 8001400:	ed97 7a04 	vldr	s14, [r7, #16]
 8001404:	edd7 7a08 	vldr	s15, [r7, #32]
 8001408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	dc15      	bgt.n	8001442 <Update_Panel_State_po+0x12a>
 8001416:	ed97 7a06 	vldr	s14, [r7, #24]
 800141a:	edd7 7a05 	vldr	s15, [r7, #20]
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	d514      	bpl.n	8001456 <Update_Panel_State_po+0x13e>
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a08 	vldr	s15, [r7, #32]
 8001434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	d509      	bpl.n	8001456 <Update_Panel_State_po+0x13e>
			Change_Panel_Values_po(Converter_Index, INCREASE, 8);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2208      	movs	r2, #8
 8001446:	2101      	movs	r1, #1
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fef2 	bl	8001232 <Change_Panel_Values_po>
			At_mpp = NOT_AT_MPP;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001454:	e034      	b.n	80014c0 <Update_Panel_State_po+0x1a8>
		}
		else if (((Power - Previous_Power > 0) && (Voltage - Previous_Voltage) < 0) || ((Power - Previous_Power < 0) && (Voltage - Previous_Voltage) > 0)) {
 8001456:	ed97 7a06 	vldr	s14, [r7, #24]
 800145a:	edd7 7a05 	vldr	s15, [r7, #20]
 800145e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001462:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	dd0a      	ble.n	8001482 <Update_Panel_State_po+0x16a>
 800146c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001470:	edd7 7a08 	vldr	s15, [r7, #32]
 8001474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001480:	d415      	bmi.n	80014ae <Update_Panel_State_po+0x196>
 8001482:	ed97 7a06 	vldr	s14, [r7, #24]
 8001486:	edd7 7a05 	vldr	s15, [r7, #20]
 800148a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	d513      	bpl.n	80014c0 <Update_Panel_State_po+0x1a8>
 8001498:	ed97 7a04 	vldr	s14, [r7, #16]
 800149c:	edd7 7a08 	vldr	s15, [r7, #32]
 80014a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	dd08      	ble.n	80014c0 <Update_Panel_State_po+0x1a8>
			Change_Panel_Values_po(Converter_Index, DECREASE, 8);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2208      	movs	r2, #8
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff febc 	bl	8001232 <Change_Panel_Values_po>
			At_mpp = NOT_AT_MPP;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}
	}
	Update_Panel_Parameters_po(Converter_Index, Voltage, Current, At_mpp, Partially_shaded, SolarPanels);
 80014c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80014cc:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80014d0:	79f8      	ldrb	r0, [r7, #7]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	eef0 0a47 	vmov.f32	s1, s14
 80014d8:	eeb0 0a67 	vmov.f32	s0, s15
 80014dc:	f7ff febc 	bl	8001258 <Update_Panel_Parameters_po>
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	@ 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <Update_All_Panel_States_po>:

void Update_All_Panel_States_po(SolarPanel *SolarPanels)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < Converter_Number_PO; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e008      	b.n	8001508 <Update_All_Panel_States_po+0x20>
		Update_Panel_State_po(i, SolarPanels);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff0b 	bl	8001318 <Update_Panel_State_po>
	for (int i = 0; i < Converter_Number_PO; i++) {
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3301      	adds	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <Update_All_Panel_States_po+0x34>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3f1      	bcc.n	80014f6 <Update_All_Panel_States_po+0xe>
	}
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000218 	.word	0x20000218

08001520 <Determine_I2C_Bus_ACS37800>:
extern I2C_HandleTypeDef hi2c3;

const uint8_t AddressesACS37800[2] = {0x60, 0x61};

I2C_HandleTypeDef *Determine_I2C_Bus_ACS37800(uint8_t Converter_Index)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
	uint8_t converter_set = Converter_Index / 2;
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef *I2C_Line_Address;
	switch (converter_set) {
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d00c      	beq.n	8001550 <Determine_I2C_Bus_ACS37800+0x30>
 8001536:	2b02      	cmp	r3, #2
 8001538:	dc0d      	bgt.n	8001556 <Determine_I2C_Bus_ACS37800+0x36>
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <Determine_I2C_Bus_ACS37800+0x24>
 800153e:	2b01      	cmp	r3, #1
 8001540:	d003      	beq.n	800154a <Determine_I2C_Bus_ACS37800+0x2a>
 8001542:	e008      	b.n	8001556 <Determine_I2C_Bus_ACS37800+0x36>
	case 0:
		I2C_Line_Address = &hi2c1;
 8001544:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <Determine_I2C_Bus_ACS37800+0x44>)
 8001546:	60fb      	str	r3, [r7, #12]
		break;
 8001548:	e005      	b.n	8001556 <Determine_I2C_Bus_ACS37800+0x36>
	case 1:
		I2C_Line_Address = &hi2c2;
 800154a:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <Determine_I2C_Bus_ACS37800+0x48>)
 800154c:	60fb      	str	r3, [r7, #12]
		break;
 800154e:	e002      	b.n	8001556 <Determine_I2C_Bus_ACS37800+0x36>
	case 2:
		I2C_Line_Address = &hi2c3;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <Determine_I2C_Bus_ACS37800+0x4c>)
 8001552:	60fb      	str	r3, [r7, #12]
		break;
 8001554:	bf00      	nop
	}
	return I2C_Line_Address;
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	20000080 	.word	0x20000080
 8001568:	200000d4 	.word	0x200000d4
 800156c:	20000128 	.word	0x20000128

08001570 <Calculate_Voltage_RMSACS37800>:
		HAL_Status = WriteByteACS37800(Converter_Index, Address, WriteValue);
	}
}

uint32_t Calculate_Voltage_RMSACS37800(int16_t Vin)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
	float Vin_as_float = Vin / (1 << 14);
 800157a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157e:	2b00      	cmp	r3, #0
 8001580:	da02      	bge.n	8001588 <Calculate_Voltage_RMSACS37800+0x18>
 8001582:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001586:	333f      	adds	r3, #63	@ 0x3f
 8001588:	139b      	asrs	r3, r3, #14
 800158a:	b21b      	sxth	r3, r3
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001594:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t V_line = (Vin_as_float * (RISO + RSENSE)) / RSENSE;
 8001598:	edd7 7a03 	vldr	s15, [r7, #12]
 800159c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a4:	ee17 3a90 	vmov	r3, s15
 80015a8:	60bb      	str	r3, [r7, #8]
	return V_line;
 80015aa:	68bb      	ldr	r3, [r7, #8]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <Calculate_Current_RMSACS37800>:

uint32_t Calculate_Current_RMSACS37800(int16_t Iin, int16_t Vin, float V_line)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	460a      	mov	r2, r1
 80015c2:	ed87 0a00 	vstr	s0, [r7]
 80015c6:	80fb      	strh	r3, [r7, #6]
 80015c8:	4613      	mov	r3, r2
 80015ca:	80bb      	strh	r3, [r7, #4]
	float Vin_as_float = Vin / (1 << 14);
 80015cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da02      	bge.n	80015da <Calculate_Current_RMSACS37800+0x22>
 80015d4:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80015d8:	333f      	adds	r3, #63	@ 0x3f
 80015da:	139b      	asrs	r3, r3, #14
 80015dc:	b21b      	sxth	r3, r3
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	edc7 7a05 	vstr	s15, [r7, #20]
	float Iin_as_float = Iin / (1 << 14);
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da02      	bge.n	80015f8 <Calculate_Current_RMSACS37800+0x40>
 80015f2:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80015f6:	333f      	adds	r3, #63	@ 0x3f
 80015f8:	139b      	asrs	r3, r3, #14
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001604:	edc7 7a04 	vstr	s15, [r7, #16]
	uint32_t I_line = Iin_as_float * (V_line / Vin_as_float);
 8001608:	edd7 6a00 	vldr	s13, [r7]
 800160c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001614:	edd7 7a04 	vldr	s15, [r7, #16]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	60fb      	str	r3, [r7, #12]
	return I_line;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <Get_Sensor_Values_for_Panel_hc_test>:

void Get_Sensor_Values_for_Panel_hc_test(uint8_t Converter_Index, float *Voltage, float *Current)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	73fb      	strb	r3, [r7, #15]
	*Voltage = 1.6;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4a05      	ldr	r2, [pc, #20]	@ (800165c <Get_Sensor_Values_for_Panel_hc_test+0x28>)
 8001646:	601a      	str	r2, [r3, #0]
	*Current = 7.3;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <Get_Sensor_Values_for_Panel_hc_test+0x2c>)
 800164c:	601a      	str	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	3fcccccd 	.word	0x3fcccccd
 8001660:	40e9999a 	.word	0x40e9999a

08001664 <Read_Sensor_ValuesACS37800>:

void Read_Sensor_ValuesACS37800(uint8_t Converter_Index, float *Voltage, float *Current)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	75fb      	strb	r3, [r7, #23]
	uint32_t ReadValue;
	int16_t Vin;
	int16_t Iin;
	ReadValue = ReadByteACS37800(Converter_Index, RMS_REGISTER, &HAL_Status);
 8001676:	f107 0217 	add.w	r2, r7, #23
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2120      	movs	r1, #32
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f82a 	bl	80016d8 <ReadByteACS37800>
 8001684:	61f8      	str	r0, [r7, #28]
	Vin = ReadValue & 0xffff;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	837b      	strh	r3, [r7, #26]
	Iin = (ReadValue >> 16) & 0xffff;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	0c1b      	lsrs	r3, r3, #16
 800168e:	833b      	strh	r3, [r7, #24]
	*Voltage = Calculate_Voltage_RMSACS37800(Vin);
 8001690:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff6b 	bl	8001570 <Calculate_Voltage_RMSACS37800>
 800169a:	ee07 0a90 	vmov	s15, r0
 800169e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	edc3 7a00 	vstr	s15, [r3]
	*Current = Calculate_Current_RMSACS37800(Iin, Vin, *Voltage);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80016b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff7b 	bl	80015b8 <Calculate_Current_RMSACS37800>
 80016c2:	ee07 0a90 	vmov	s15, r0
 80016c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	edc3 7a00 	vstr	s15, [r3]
}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <ReadByteACS37800>:
	while (HAL_I2C_IsDeviceReady(I2C_Line_Address, Device_Address, 1, HAL_MAX_DELAY));
	return HAL_Status;
}

uint32_t ReadByteACS37800(uint8_t Converter_Index, uint8_t Register_Address, HAL_StatusTypeDef *Error_Handling)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af02      	add	r7, sp, #8
 80016de:	4603      	mov	r3, r0
 80016e0:	603a      	str	r2, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	460b      	mov	r3, r1
 80016e6:	71bb      	strb	r3, [r7, #6]
	uint32_t ReturnValue = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ReadValue[4];
	uint8_t address_type = Converter_Index % 2;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	77fb      	strb	r3, [r7, #31]
	I2C_HandleTypeDef *I2C_Line_Address = Determine_I2C_Bus_ACS37800(Converter_Index);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff12 	bl	8001520 <Determine_I2C_Bus_ACS37800>
 80016fc:	61b8      	str	r0, [r7, #24]
	uint8_t Device_Address = AddressesACS37800[address_type];
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	4a20      	ldr	r2, [pc, #128]	@ (8001784 <ReadByteACS37800+0xac>)
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	75fb      	strb	r3, [r7, #23]
	uint8_t BytesToSend[1];
	BytesToSend[0] = Register_Address;
 8001706:	79bb      	ldrb	r3, [r7, #6]
 8001708:	733b      	strb	r3, [r7, #12]
	*Error_Handling = HAL_I2C_Master_Transmit(I2C_Line_Address, Device_Address, BytesToSend, 1, HAL_MAX_DELAY);
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	b299      	uxth	r1, r3
 800170e:	f107 020c 	add.w	r2, r7, #12
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	69b8      	ldr	r0, [r7, #24]
 800171c:	f000 fee4 	bl	80024e8 <HAL_I2C_Master_Transmit>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	701a      	strb	r2, [r3, #0]
	*Error_Handling = HAL_I2C_Master_Receive(I2C_Line_Address, Device_Address, ReadValue, 4, HAL_MAX_DELAY);
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	b299      	uxth	r1, r3
 800172c:	f107 0210 	add.w	r2, r7, #16
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2304      	movs	r3, #4
 8001738:	69b8      	ldr	r0, [r7, #24]
 800173a:	f000 ffd3 	bl	80026e4 <HAL_I2C_Master_Receive>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	e012      	b.n	8001772 <ReadByteACS37800+0x9a>
		ReturnValue = ReturnValue + (ReadValue[i] << (8 *(3 - i)) & 0xff);
 800174c:	f107 0210 	add.w	r2, r7, #16
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	f1c3 0303 	rsb	r3, r3, #3
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001768:	4413      	add	r3, r2
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 4; i++) {
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	3301      	adds	r3, #1
 8001770:	623b      	str	r3, [r7, #32]
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	2b03      	cmp	r3, #3
 8001776:	dde9      	ble.n	800174c <ReadByteACS37800+0x74>
	}
	return ReturnValue;
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800177a:	4618      	mov	r0, r3
 800177c:	3728      	adds	r7, #40	@ 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	080057a8 	.word	0x080057a8

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	4a0f      	ldr	r2, [pc, #60]	@ (80017d4 <HAL_MspInit+0x4c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179c:	6453      	str	r3, [r2, #68]	@ 0x44
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <NMI_Handler+0x4>

080017e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <MemManage_Handler+0x4>

080017f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <UsageFault_Handler+0x4>

08001800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182e:	f000 f9ab 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <USART2_IRQHandler+0x10>)
 800183e:	f002 fb8f 	bl	8003f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//  HAL_UART_RxCpltCallback(&huart2);
  /* USER CODE END USART2_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000224 	.word	0x20000224

0800184c <Increase_Converter_Reference_Voltage>:
	}
	Converter_Number_PS = Number_of_Converters;
}

void Increase_Converter_Reference_Voltage(uint8_t Increase_Rate)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < Converter_Number_PS; i++) {
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	e009      	b.n	8001870 <Increase_Converter_Reference_Voltage+0x24>
		Update_Reference_Voltage_TPS55288(i, 1, Increase_Rate);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	79fa      	ldrb	r2, [r7, #7]
 8001862:	2101      	movs	r1, #1
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe feab 	bl	80005c0 <Update_Reference_Voltage_TPS55288>
	for (int i = 0; i < Converter_Number_PS; i++) {
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3301      	adds	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <Increase_Converter_Reference_Voltage+0x3c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4293      	cmp	r3, r2
 800187a:	dbef      	blt.n	800185c <Increase_Converter_Reference_Voltage+0x10>
	}
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000021c 	.word	0x2000021c

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f003 face 	bl	8004e5c <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20018000 	.word	0x20018000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20000220 	.word	0x20000220
 80018f4:	200003b8 	.word	0x200003b8

080018f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <MX_USART2_UART_Init+0x50>)
 8001922:	4a13      	ldr	r2, [pc, #76]	@ (8001970 <MX_USART2_UART_Init+0x54>)
 8001924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <MX_USART2_UART_Init+0x50>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800192e:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <MX_USART2_UART_Init+0x50>)
 8001930:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001934:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <MX_USART2_UART_Init+0x50>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <MX_USART2_UART_Init+0x50>)
 800193e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <MX_USART2_UART_Init+0x50>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <MX_USART2_UART_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <MX_USART2_UART_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_USART2_UART_Init+0x50>)
 8001958:	f002 fa02 	bl	8003d60 <HAL_UART_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001962:	f7ff fc3b 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000224 	.word	0x20000224
 8001970:	40004400 	.word	0x40004400

08001974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <HAL_UART_MspInit+0x94>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d133      	bne.n	80019fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ce:	230c      	movs	r3, #12
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019de:	2307      	movs	r3, #7
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4809      	ldr	r0, [pc, #36]	@ (8001a10 <HAL_UART_MspInit+0x9c>)
 80019ea:	f000 fab5 	bl	8001f58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	2026      	movs	r0, #38	@ 0x26
 80019f4:	f000 f9e7 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019f8:	2026      	movs	r0, #38	@ 0x26
 80019fa:	f000 fa00 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40004400 	.word	0x40004400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <PrintOutputData>:
  }
}

/* USER CODE BEGIN 1 */
void PrintOutputData(uint8_t *OutputBuffer)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HALStatus;
	HALStatus = HAL_UART_Transmit(&huart2, OutputBuffer, 12, HAL_MAX_DELAY);
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	220c      	movs	r2, #12
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <PrintOutputData+0x2c>)
 8001a26:	f002 f9eb 	bl	8003e00 <HAL_UART_Transmit>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73fb      	strb	r3, [r7, #15]
	if (HALStatus != HAL_OK) {
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <PrintOutputData+0x24>
		Error_Handler();
 8001a34:	f7ff fbd2 	bl	80011dc <Error_Handler>
	}
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000224 	.word	0x20000224

08001a44 <PrintOutputBuffer>:

void PrintOutputBuffer(uint8_t *OutputBuffer)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	uint32_t StringLength;
	HAL_StatusTypeDef HALStatus;

	for (StringLength = 0; *(OutputBuffer + StringLength); StringLength++);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e002      	b.n	8001a58 <PrintOutputBuffer+0x14>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3301      	adds	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f6      	bne.n	8001a52 <PrintOutputBuffer+0xe>

	HALStatus = HAL_UART_Transmit(&huart2, OutputBuffer, StringLength, HAL_MAX_DELAY);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4807      	ldr	r0, [pc, #28]	@ (8001a8c <PrintOutputBuffer+0x48>)
 8001a70:	f002 f9c6 	bl	8003e00 <HAL_UART_Transmit>
 8001a74:	4603      	mov	r3, r0
 8001a76:	72fb      	strb	r3, [r7, #11]

	if (HALStatus != HAL_OK) {
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <PrintOutputBuffer+0x3e>
		Error_Handler();
 8001a7e:	f7ff fbad 	bl	80011dc <Error_Handler>
	}

}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000224 	.word	0x20000224

08001a90 <Reset_Handler>:
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac8 <LoopFillZerobss+0xe>
 8001a94:	f7ff ff30 	bl	80018f8 <SystemInit>
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <LoopFillZerobss+0x12>)
 8001a9a:	490d      	ldr	r1, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x16>)
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <LoopFillZerobss+0x1a>)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:
 8001aa2:	58d4      	ldr	r4, [r2, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:
 8001aa8:	18c4      	adds	r4, r0, r3
 8001aaa:	428c      	cmp	r4, r1
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x1e>)
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8001adc <LoopFillZerobss+0x22>)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:
 8001aba:	42a2      	cmp	r2, r4
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>
 8001abe:	f003 f9d3 	bl	8004e68 <__libc_init_array>
 8001ac2:	f7ff fa27 	bl	8000f14 <main>
 8001ac6:	4770      	bx	lr
 8001ac8:	20018000 	.word	0x20018000
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000060 	.word	0x20000060
 8001ad4:	08005808 	.word	0x08005808
 8001ad8:	20000060 	.word	0x20000060
 8001adc:	200003b8 	.word	0x200003b8

08001ae0 <ADC_IRQHandler>:
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f94f 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>
 8001b18:	f7ff fe36 	bl	8001788 <HAL_MspInit>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_InitTick>:
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f967 	bl	8001e1a <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f92f 	bl	8001dc6 <HAL_NVIC_SetPriority>
 8001b68:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
 8001b72:	2301      	movs	r3, #1
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_IncTick>:
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	2000026c 	.word	0x2000026c

08001bb0 <HAL_GetTick>:
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000026c 	.word	0x2000026c

08001bc8 <HAL_Delay>:
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000000c 	.word	0x2000000c

08001c10 <__NVIC_SetPriorityGrouping>:
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	@ (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	@ (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	@ (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	@ 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
 8001d94:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	2300      	movs	r3, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff29 	bl	8001c10 <__NVIC_SetPriorityGrouping>
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	f7ff ff3e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff31 	bl	8001c74 <__NVIC_EnableIRQ>
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_DMA_Abort>:
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	f7ff feb6 	bl	8001bb0 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d008      	beq.n	8001e64 <HAL_DMA_Abort+0x32>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2280      	movs	r2, #128	@ 0x80
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001e60:	2301      	movs	r3, #1
 8001e62:	e052      	b.n	8001f0a <HAL_DMA_Abort+0xd8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0216 	bic.w	r2, r2, #22
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e82:	615a      	str	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d103      	bne.n	8001e94 <HAL_DMA_Abort+0x62>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_DMA_Abort+0x72>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0208 	bic.w	r2, r2, #8
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e013      	b.n	8001ede <HAL_DMA_Abort+0xac>
 8001eb6:	f7ff fe7b 	bl	8001bb0 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d90c      	bls.n	8001ede <HAL_DMA_Abort+0xac>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001eda:	2303      	movs	r3, #3
 8001edc:	e015      	b.n	8001f0a <HAL_DMA_Abort+0xd8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e4      	bne.n	8001eb6 <HAL_DMA_Abort+0x84>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef0:	223f      	movs	r2, #63	@ 0x3f
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001f08:	2300      	movs	r3, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DMA_Abort_IT>:
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d004      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x1e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2280      	movs	r2, #128	@ 0x80
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e00c      	b.n	8001f4a <HAL_DMA_Abort_IT+0x38>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2205      	movs	r2, #5
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_GPIO_Init>:
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	e159      	b.n	8002228 <HAL_GPIO_Init+0x2d0>
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	f040 8148 	bne.w	8002222 <HAL_GPIO_Init+0x2ca>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d005      	beq.n	8001faa <HAL_GPIO_Init+0x52>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d130      	bne.n	800200c <HAL_GPIO_Init+0xb4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 0201 	and.w	r2, r3, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b03      	cmp	r3, #3
 8002016:	d017      	beq.n	8002048 <HAL_GPIO_Init+0xf0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d123      	bne.n	800209c <HAL_GPIO_Init+0x144>
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	08da      	lsrs	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3208      	adds	r2, #8
 800205c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	220f      	movs	r2, #15
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	08da      	lsrs	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3208      	adds	r2, #8
 8002096:	69b9      	ldr	r1, [r7, #24]
 8002098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0203 	and.w	r2, r3, #3
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a2 	beq.w	8002222 <HAL_GPIO_Init+0x2ca>
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b57      	ldr	r3, [pc, #348]	@ (8002240 <HAL_GPIO_Init+0x2e8>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	4a56      	ldr	r2, [pc, #344]	@ (8002240 <HAL_GPIO_Init+0x2e8>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ee:	4b54      	ldr	r3, [pc, #336]	@ (8002240 <HAL_GPIO_Init+0x2e8>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4a52      	ldr	r2, [pc, #328]	@ (8002244 <HAL_GPIO_Init+0x2ec>)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a49      	ldr	r2, [pc, #292]	@ (8002248 <HAL_GPIO_Init+0x2f0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d019      	beq.n	800215a <HAL_GPIO_Init+0x202>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a48      	ldr	r2, [pc, #288]	@ (800224c <HAL_GPIO_Init+0x2f4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0x1fe>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a47      	ldr	r2, [pc, #284]	@ (8002250 <HAL_GPIO_Init+0x2f8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00d      	beq.n	8002152 <HAL_GPIO_Init+0x1fa>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a46      	ldr	r2, [pc, #280]	@ (8002254 <HAL_GPIO_Init+0x2fc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x1f6>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a45      	ldr	r2, [pc, #276]	@ (8002258 <HAL_GPIO_Init+0x300>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_GPIO_Init+0x1f2>
 8002146:	2304      	movs	r3, #4
 8002148:	e008      	b.n	800215c <HAL_GPIO_Init+0x204>
 800214a:	2307      	movs	r3, #7
 800214c:	e006      	b.n	800215c <HAL_GPIO_Init+0x204>
 800214e:	2303      	movs	r3, #3
 8002150:	e004      	b.n	800215c <HAL_GPIO_Init+0x204>
 8002152:	2302      	movs	r3, #2
 8002154:	e002      	b.n	800215c <HAL_GPIO_Init+0x204>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_GPIO_Init+0x204>
 800215a:	2300      	movs	r3, #0
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	f002 0203 	and.w	r2, r2, #3
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	4093      	lsls	r3, r2
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	4935      	ldr	r1, [pc, #212]	@ (8002244 <HAL_GPIO_Init+0x2ec>)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800217a:	4b38      	ldr	r3, [pc, #224]	@ (800225c <HAL_GPIO_Init+0x304>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x246>
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	4a2f      	ldr	r2, [pc, #188]	@ (800225c <HAL_GPIO_Init+0x304>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6093      	str	r3, [r2, #8]
 80021a4:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <HAL_GPIO_Init+0x304>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x270>
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	4a24      	ldr	r2, [pc, #144]	@ (800225c <HAL_GPIO_Init+0x304>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	60d3      	str	r3, [r2, #12]
 80021ce:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_GPIO_Init+0x304>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x29a>
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	4a1a      	ldr	r2, [pc, #104]	@ (800225c <HAL_GPIO_Init+0x304>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	6053      	str	r3, [r2, #4]
 80021f8:	4b18      	ldr	r3, [pc, #96]	@ (800225c <HAL_GPIO_Init+0x304>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x2c4>
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	4a0f      	ldr	r2, [pc, #60]	@ (800225c <HAL_GPIO_Init+0x304>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3301      	adds	r3, #1
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b0f      	cmp	r3, #15
 800222c:	f67f aea2 	bls.w	8001f74 <HAL_GPIO_Init+0x1c>
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3724      	adds	r7, #36	@ 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	40013800 	.word	0x40013800
 8002248:	40020000 	.word	0x40020000
 800224c:	40020400 	.word	0x40020400
 8002250:	40020800 	.word	0x40020800
 8002254:	40020c00 	.word	0x40020c00
 8002258:	40021000 	.word	0x40021000
 800225c:	40013c00 	.word	0x40013c00

08002260 <HAL_I2C_Init>:
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Init+0x12>
 800226e:	2301      	movs	r3, #1
 8002270:	e12b      	b.n	80024ca <HAL_I2C_Init+0x26a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_I2C_Init+0x2c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fd60 	bl	8000d4c <HAL_I2C_MspInit>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	@ 0x24
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f001 fd24 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4a81      	ldr	r2, [pc, #516]	@ (80024d4 <HAL_I2C_Init+0x274>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d807      	bhi.n	80022e4 <HAL_I2C_Init+0x84>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a80      	ldr	r2, [pc, #512]	@ (80024d8 <HAL_I2C_Init+0x278>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	bf94      	ite	ls
 80022dc:	2301      	movls	r3, #1
 80022de:	2300      	movhi	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e006      	b.n	80022f2 <HAL_I2C_Init+0x92>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a7d      	ldr	r2, [pc, #500]	@ (80024dc <HAL_I2C_Init+0x27c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	bf94      	ite	ls
 80022ec:	2301      	movls	r3, #1
 80022ee:	2300      	movhi	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Init+0x9a>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0e7      	b.n	80024ca <HAL_I2C_Init+0x26a>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a78      	ldr	r2, [pc, #480]	@ (80024e0 <HAL_I2C_Init+0x280>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a6a      	ldr	r2, [pc, #424]	@ (80024d4 <HAL_I2C_Init+0x274>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d802      	bhi.n	8002334 <HAL_I2C_Init+0xd4>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3301      	adds	r3, #1
 8002332:	e009      	b.n	8002348 <HAL_I2C_Init+0xe8>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	4a69      	ldr	r2, [pc, #420]	@ (80024e4 <HAL_I2C_Init+0x284>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	3301      	adds	r3, #1
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	430b      	orrs	r3, r1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800235a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	495c      	ldr	r1, [pc, #368]	@ (80024d4 <HAL_I2C_Init+0x274>)
 8002364:	428b      	cmp	r3, r1
 8002366:	d819      	bhi.n	800239c <HAL_I2C_Init+0x13c>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e59      	subs	r1, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fbb1 f3f3 	udiv	r3, r1, r3
 8002376:	1c59      	adds	r1, r3, #1
 8002378:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800237c:	400b      	ands	r3, r1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_I2C_Init+0x138>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e59      	subs	r1, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002396:	e051      	b.n	800243c <HAL_I2C_Init+0x1dc>
 8002398:	2304      	movs	r3, #4
 800239a:	e04f      	b.n	800243c <HAL_I2C_Init+0x1dc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d111      	bne.n	80023c8 <HAL_I2C_Init+0x168>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e58      	subs	r0, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	440b      	add	r3, r1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e012      	b.n	80023ee <HAL_I2C_Init+0x18e>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	0099      	lsls	r1, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Init+0x196>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e022      	b.n	800243c <HAL_I2C_Init+0x1dc>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10e      	bne.n	800241c <HAL_I2C_Init+0x1bc>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1e58      	subs	r0, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	440b      	add	r3, r1
 800240c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800241a:	e00f      	b.n	800243c <HAL_I2C_Init+0x1dc>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	0099      	lsls	r1, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	6809      	ldr	r1, [r1, #0]
 8002440:	4313      	orrs	r3, r2
 8002442:	61cb      	str	r3, [r1, #28]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800246a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6911      	ldr	r1, [r2, #16]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	4311      	orrs	r1, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	430b      	orrs	r3, r1
 800247e:	6093      	str	r3, [r2, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024c8:	2300      	movs	r3, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	000186a0 	.word	0x000186a0
 80024d8:	001e847f 	.word	0x001e847f
 80024dc:	003d08ff 	.word	0x003d08ff
 80024e0:	431bde83 	.word	0x431bde83
 80024e4:	10624dd3 	.word	0x10624dd3

080024e8 <HAL_I2C_Master_Transmit>:
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	461a      	mov	r2, r3
 80024f4:	460b      	mov	r3, r1
 80024f6:	817b      	strh	r3, [r7, #10]
 80024f8:	4613      	mov	r3, r2
 80024fa:	813b      	strh	r3, [r7, #8]
 80024fc:	f7ff fb58 	bl	8001bb0 <HAL_GetTick>
 8002500:	6178      	str	r0, [r7, #20]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b20      	cmp	r3, #32
 800250c:	f040 80e0 	bne.w	80026d0 <HAL_I2C_Master_Transmit+0x1e8>
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2319      	movs	r3, #25
 8002516:	2201      	movs	r2, #1
 8002518:	4970      	ldr	r1, [pc, #448]	@ (80026dc <HAL_I2C_Master_Transmit+0x1f4>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fd92 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Master_Transmit+0x42>
 8002526:	2302      	movs	r3, #2
 8002528:	e0d3      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x50>
 8002534:	2302      	movs	r3, #2
 8002536:	e0cc      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d007      	beq.n	800255e <HAL_I2C_Master_Transmit+0x76>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2221      	movs	r2, #33	@ 0x21
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2210      	movs	r2, #16
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	641a      	str	r2, [r3, #64]	@ 0x40
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	893a      	ldrh	r2, [r7, #8]
 800258e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	@ 0x28
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a50      	ldr	r2, [pc, #320]	@ (80026e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800259e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025a0:	8979      	ldrh	r1, [r7, #10]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6a3a      	ldr	r2, [r7, #32]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fbfc 	bl	8002da4 <I2C_MasterRequestWrite>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0xce>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e08d      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	e066      	b.n	800269c <HAL_I2C_Master_Transmit+0x1b4>
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	6a39      	ldr	r1, [r7, #32]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fe50 	bl	8003278 <I2C_WaitOnTXEFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00d      	beq.n	80025fa <HAL_I2C_Master_Transmit+0x112>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d107      	bne.n	80025f6 <HAL_I2C_Master_Transmit+0x10e>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	611a      	str	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	@ 0x28
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b04      	cmp	r3, #4
 8002636:	d11b      	bne.n	8002670 <HAL_I2C_Master_Transmit+0x188>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d017      	beq.n	8002670 <HAL_I2C_Master_Transmit+0x188>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6a39      	ldr	r1, [r7, #32]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fe47 	bl	8003308 <I2C_WaitOnBTFFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <HAL_I2C_Master_Transmit+0x1b4>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	2b04      	cmp	r3, #4
 8002686:	d107      	bne.n	8002698 <HAL_I2C_Master_Transmit+0x1b0>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	2301      	movs	r3, #1
 800269a:	e01a      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d194      	bne.n	80025ce <HAL_I2C_Master_Transmit+0xe6>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
 80026d0:	2302      	movs	r3, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	00100002 	.word	0x00100002
 80026e0:	ffff0000 	.word	0xffff0000

080026e4 <HAL_I2C_Master_Receive>:
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	@ 0x30
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	461a      	mov	r2, r3
 80026f0:	460b      	mov	r3, r1
 80026f2:	817b      	strh	r3, [r7, #10]
 80026f4:	4613      	mov	r3, r2
 80026f6:	813b      	strh	r3, [r7, #8]
 80026f8:	f7ff fa5a 	bl	8001bb0 <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	f040 8217 	bne.w	8002b3a <HAL_I2C_Master_Receive+0x456>
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2319      	movs	r3, #25
 8002712:	2201      	movs	r2, #1
 8002714:	497c      	ldr	r1, [pc, #496]	@ (8002908 <HAL_I2C_Master_Receive+0x224>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fc94 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Master_Receive+0x42>
 8002722:	2302      	movs	r3, #2
 8002724:	e20a      	b.n	8002b3c <HAL_I2C_Master_Receive+0x458>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_I2C_Master_Receive+0x50>
 8002730:	2302      	movs	r3, #2
 8002732:	e203      	b.n	8002b3c <HAL_I2C_Master_Receive+0x458>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d007      	beq.n	800275a <HAL_I2C_Master_Receive+0x76>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2222      	movs	r2, #34	@ 0x22
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2210      	movs	r2, #16
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	893a      	ldrh	r2, [r7, #8]
 800278a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a5c      	ldr	r2, [pc, #368]	@ (800290c <HAL_I2C_Master_Receive+0x228>)
 800279a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800279c:	8979      	ldrh	r1, [r7, #10]
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fb80 	bl	8002ea8 <I2C_MasterRequestRead>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Master_Receive+0xce>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e1c4      	b.n	8002b3c <HAL_I2C_Master_Receive+0x458>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d113      	bne.n	80027e2 <HAL_I2C_Master_Receive+0xfe>
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	623b      	str	r3, [r7, #32]
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e198      	b.n	8002b14 <HAL_I2C_Master_Receive+0x430>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d11b      	bne.n	8002822 <HAL_I2C_Master_Receive+0x13e>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e178      	b.n	8002b14 <HAL_I2C_Master_Receive+0x430>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002826:	2b02      	cmp	r3, #2
 8002828:	d11b      	bne.n	8002862 <HAL_I2C_Master_Receive+0x17e>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	e158      	b.n	8002b14 <HAL_I2C_Master_Receive+0x430>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	e144      	b.n	8002b14 <HAL_I2C_Master_Receive+0x430>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288e:	2b03      	cmp	r3, #3
 8002890:	f200 80f1 	bhi.w	8002a76 <HAL_I2C_Master_Receive+0x392>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002898:	2b01      	cmp	r3, #1
 800289a:	d123      	bne.n	80028e4 <HAL_I2C_Master_Receive+0x200>
 800289c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fd79 	bl	8003398 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Master_Receive+0x1cc>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e145      	b.n	8002b3c <HAL_I2C_Master_Receive+0x458>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028e2:	e117      	b.n	8002b14 <HAL_I2C_Master_Receive+0x430>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d14e      	bne.n	800298a <HAL_I2C_Master_Receive+0x2a6>
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	2200      	movs	r2, #0
 80028f4:	4906      	ldr	r1, [pc, #24]	@ (8002910 <HAL_I2C_Master_Receive+0x22c>)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fba4 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_I2C_Master_Receive+0x230>
 8002902:	2301      	movs	r3, #1
 8002904:	e11a      	b.n	8002b3c <HAL_I2C_Master_Receive+0x458>
 8002906:	bf00      	nop
 8002908:	00100002 	.word	0x00100002
 800290c:	ffff0000 	.word	0xffff0000
 8002910:	00010004 	.word	0x00010004
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	625a      	str	r2, [r3, #36]	@ 0x24
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	625a      	str	r2, [r3, #36]	@ 0x24
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	@ 0x28
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002988:	e0c4      	b.n	8002b14 <HAL_I2C_Master_Receive+0x430>
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002990:	2200      	movs	r2, #0
 8002992:	496c      	ldr	r1, [pc, #432]	@ (8002b44 <HAL_I2C_Master_Receive+0x460>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fb55 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Master_Receive+0x2c0>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0cb      	b.n	8002b3c <HAL_I2C_Master_Receive+0x458>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	2200      	movs	r2, #0
 80029ee:	4955      	ldr	r1, [pc, #340]	@ (8002b44 <HAL_I2C_Master_Receive+0x460>)
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fb27 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Master_Receive+0x31c>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e09d      	b.n	8002b3c <HAL_I2C_Master_Receive+0x458>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a74:	e04e      	b.n	8002b14 <HAL_I2C_Master_Receive+0x430>
 8002a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fc8c 	bl	8003398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Master_Receive+0x3a6>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e058      	b.n	8002b3c <HAL_I2C_Master_Receive+0x458>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d124      	bne.n	8002b14 <HAL_I2C_Master_Receive+0x430>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_I2C_Master_Receive+0x3fe>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f aeb6 	bne.w	800288a <HAL_I2C_Master_Receive+0x1a6>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_I2C_Master_Receive+0x458>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	@ 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	00010004 	.word	0x00010004

08002b48 <HAL_I2C_IsDeviceReady>:
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
 8002b58:	f7ff f82a 	bl	8001bb0 <HAL_GetTick>
 8002b5c:	61f8      	str	r0, [r7, #28]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 8111 	bne.w	8002d92 <HAL_I2C_IsDeviceReady+0x24a>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2319      	movs	r3, #25
 8002b76:	2201      	movs	r2, #1
 8002b78:	4988      	ldr	r1, [pc, #544]	@ (8002d9c <HAL_I2C_IsDeviceReady+0x254>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa62 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_IsDeviceReady+0x42>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e104      	b.n	8002d94 <HAL_I2C_IsDeviceReady+0x24c>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_I2C_IsDeviceReady+0x50>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0fd      	b.n	8002d94 <HAL_I2C_IsDeviceReady+0x24c>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d007      	beq.n	8002bbe <HAL_I2C_IsDeviceReady+0x76>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2224      	movs	r2, #36	@ 0x24
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4a70      	ldr	r2, [pc, #448]	@ (8002da0 <HAL_I2C_IsDeviceReady+0x258>)
 8002be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fa20 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <HAL_I2C_IsDeviceReady+0xde>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c18:	d103      	bne.n	8002c22 <HAL_I2C_IsDeviceReady+0xda>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c20:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0b6      	b.n	8002d94 <HAL_I2C_IsDeviceReady+0x24c>
 8002c26:	897b      	ldrh	r3, [r7, #10]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	f7fe ffbb 	bl	8001bb0 <HAL_GetTick>
 8002c3a:	61f8      	str	r0, [r7, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	75fb      	strb	r3, [r7, #23]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	75bb      	strb	r3, [r7, #22]
 8002c6a:	e025      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x170>
 8002c6c:	f7fe ffa0 	bl	8001bb0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d302      	bcc.n	8002c82 <HAL_I2C_IsDeviceReady+0x13a>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <HAL_I2C_IsDeviceReady+0x142>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	22a0      	movs	r2, #160	@ 0xa0
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	75fb      	strb	r3, [r7, #23]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	75bb      	strb	r3, [r7, #22]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_I2C_IsDeviceReady+0x188>
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <HAL_I2C_IsDeviceReady+0x188>
 8002cca:	7dbb      	ldrb	r3, [r7, #22]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0cd      	beq.n	8002c6c <HAL_I2C_IsDeviceReady+0x124>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d129      	bne.n	8002d3a <HAL_I2C_IsDeviceReady+0x1f2>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2319      	movs	r3, #25
 8002d12:	2201      	movs	r2, #1
 8002d14:	4921      	ldr	r1, [pc, #132]	@ (8002d9c <HAL_I2C_IsDeviceReady+0x254>)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f994 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_IsDeviceReady+0x1de>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e036      	b.n	8002d94 <HAL_I2C_IsDeviceReady+0x24c>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002d36:	2300      	movs	r3, #0
 8002d38:	e02c      	b.n	8002d94 <HAL_I2C_IsDeviceReady+0x24c>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d52:	615a      	str	r2, [r3, #20]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2319      	movs	r3, #25
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	490f      	ldr	r1, [pc, #60]	@ (8002d9c <HAL_I2C_IsDeviceReady+0x254>)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f970 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_IsDeviceReady+0x226>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e012      	b.n	8002d94 <HAL_I2C_IsDeviceReady+0x24c>
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	3301      	adds	r3, #1
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f4ff af32 	bcc.w	8002be2 <HAL_I2C_IsDeviceReady+0x9a>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_I2C_IsDeviceReady+0x24c>
 8002d92:	2302      	movs	r3, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000

08002da4 <I2C_MasterRequestWrite>:
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	460b      	mov	r3, r1
 8002db2:	817b      	strh	r3, [r7, #10]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d006      	beq.n	8002dce <I2C_MasterRequestWrite+0x2a>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d003      	beq.n	8002dce <I2C_MasterRequestWrite+0x2a>
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dcc:	d108      	bne.n	8002de0 <I2C_MasterRequestWrite+0x3c>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e00b      	b.n	8002df8 <I2C_MasterRequestWrite+0x54>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	2b12      	cmp	r3, #18
 8002de6:	d107      	bne.n	8002df8 <I2C_MasterRequestWrite+0x54>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f91d 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00d      	beq.n	8002e2c <I2C_MasterRequestWrite+0x88>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e1e:	d103      	bne.n	8002e28 <I2C_MasterRequestWrite+0x84>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e035      	b.n	8002e98 <I2C_MasterRequestWrite+0xf4>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e34:	d108      	bne.n	8002e48 <I2C_MasterRequestWrite+0xa4>
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e44:	611a      	str	r2, [r3, #16]
 8002e46:	e01b      	b.n	8002e80 <I2C_MasterRequestWrite+0xdc>
 8002e48:	897b      	ldrh	r3, [r7, #10]
 8002e4a:	11db      	asrs	r3, r3, #7
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 0306 	and.w	r3, r3, #6
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f063 030f 	orn	r3, r3, #15
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	490e      	ldr	r1, [pc, #56]	@ (8002ea0 <I2C_MasterRequestWrite+0xfc>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f966 	bl	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <I2C_MasterRequestWrite+0xd2>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e010      	b.n	8002e98 <I2C_MasterRequestWrite+0xf4>
 8002e76:	897b      	ldrh	r3, [r7, #10]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4907      	ldr	r1, [pc, #28]	@ (8002ea4 <I2C_MasterRequestWrite+0x100>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f956 	bl	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_MasterRequestWrite+0xf2>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <I2C_MasterRequestWrite+0xf4>
 8002e96:	2300      	movs	r3, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	00010008 	.word	0x00010008
 8002ea4:	00010002 	.word	0x00010002

08002ea8 <I2C_MasterRequestRead>:
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d006      	beq.n	8002ee2 <I2C_MasterRequestRead+0x3a>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d003      	beq.n	8002ee2 <I2C_MasterRequestRead+0x3a>
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ee0:	d108      	bne.n	8002ef4 <I2C_MasterRequestRead+0x4c>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e00b      	b.n	8002f0c <I2C_MasterRequestRead+0x64>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	2b11      	cmp	r3, #17
 8002efa:	d107      	bne.n	8002f0c <I2C_MasterRequestRead+0x64>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f893 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <I2C_MasterRequestRead+0x98>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f32:	d103      	bne.n	8002f3c <I2C_MasterRequestRead+0x94>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e079      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f48:	d108      	bne.n	8002f5c <I2C_MasterRequestRead+0xb4>
 8002f4a:	897b      	ldrh	r3, [r7, #10]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	e05f      	b.n	800301c <I2C_MasterRequestRead+0x174>
 8002f5c:	897b      	ldrh	r3, [r7, #10]
 8002f5e:	11db      	asrs	r3, r3, #7
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 0306 	and.w	r3, r3, #6
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f063 030f 	orn	r3, r3, #15
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4930      	ldr	r1, [pc, #192]	@ (800303c <I2C_MasterRequestRead+0x194>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f8dc 	bl	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_MasterRequestRead+0xe2>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e054      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4929      	ldr	r1, [pc, #164]	@ (8003040 <I2C_MasterRequestRead+0x198>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f8cc 	bl	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_MasterRequestRead+0x102>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e044      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f831 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00d      	beq.n	8003004 <I2C_MasterRequestRead+0x15c>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff6:	d103      	bne.n	8003000 <I2C_MasterRequestRead+0x158>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003000:	2303      	movs	r3, #3
 8003002:	e017      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
 8003004:	897b      	ldrh	r3, [r7, #10]
 8003006:	11db      	asrs	r3, r3, #7
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 0306 	and.w	r3, r3, #6
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f063 030e 	orn	r3, r3, #14
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4907      	ldr	r1, [pc, #28]	@ (8003040 <I2C_MasterRequestRead+0x198>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f888 	bl	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_MasterRequestRead+0x18a>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <I2C_MasterRequestRead+0x18c>
 8003032:	2300      	movs	r3, #0
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	00010008 	.word	0x00010008
 8003040:	00010002 	.word	0x00010002

08003044 <I2C_WaitOnFlagUntilTimeout>:
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	71fb      	strb	r3, [r7, #7]
 8003054:	e048      	b.n	80030e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d044      	beq.n	80030e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
 800305e:	f7fe fda7 	bl	8001bb0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d139      	bne.n	80030e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	0c1b      	lsrs	r3, r3, #16
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d10d      	bne.n	800309a <I2C_WaitOnFlagUntilTimeout+0x56>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	43da      	mvns	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4013      	ands	r3, r2
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	e00c      	b.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	43da      	mvns	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4013      	ands	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d116      	bne.n	80030e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80030e4:	2301      	movs	r3, #1
 80030e6:	e023      	b.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xec>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10d      	bne.n	800310e <I2C_WaitOnFlagUntilTimeout+0xca>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	43da      	mvns	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4013      	ands	r3, r2
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	e00c      	b.n	8003128 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	43da      	mvns	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4013      	ands	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	429a      	cmp	r2, r3
 800312c:	d093      	beq.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x12>
 800312e:	2300      	movs	r3, #0
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	e071      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003156:	d123      	bne.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003170:	615a      	str	r2, [r3, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	@ 0x40
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800319c:	2301      	movs	r3, #1
 800319e:	e067      	b.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d041      	beq.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80031a8:	f7fe fd02 	bl	8001bb0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d302      	bcc.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d136      	bne.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d10c      	bne.n	80031e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	43da      	mvns	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e00b      	b.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003228:	2301      	movs	r3, #1
 800322a:	e021      	b.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	0c1b      	lsrs	r3, r3, #16
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d10c      	bne.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	43da      	mvns	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4013      	ands	r3, r2
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e00b      	b.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4013      	ands	r3, r2
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	f47f af6d 	bne.w	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800326e:	2300      	movs	r3, #0
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_WaitOnTXEFlagUntilTimeout>:
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	e034      	b.n	80032f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f8e3 	bl	8003452 <I2C_IsAcknowledgeFailed>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8003292:	2301      	movs	r3, #1
 8003294:	e034      	b.n	8003300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d028      	beq.n	80032f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800329e:	f7fe fc87 	bl	8001bb0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d302      	bcc.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11d      	bne.n	80032f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032be:	2b80      	cmp	r3, #128	@ 0x80
 80032c0:	d016      	beq.n	80032f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80032ec:	2301      	movs	r3, #1
 80032ee:	e007      	b.n	8003300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fa:	2b80      	cmp	r3, #128	@ 0x80
 80032fc:	d1c3      	bne.n	8003286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80032fe:	2300      	movs	r3, #0
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_WaitOnBTFFlagUntilTimeout>:
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	e034      	b.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f89b 	bl	8003452 <I2C_IsAcknowledgeFailed>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8003322:	2301      	movs	r3, #1
 8003324:	e034      	b.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d028      	beq.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800332e:	f7fe fc3f 	bl	8001bb0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11d      	bne.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d016      	beq.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800337c:	2301      	movs	r3, #1
 800337e:	e007      	b.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d1c3      	bne.n	8003316 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800338e:	2300      	movs	r3, #0
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	e049      	b.n	800343a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d119      	bne.n	80033e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0210 	mvn.w	r2, #16
 80033bc:	615a      	str	r2, [r3, #20]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80033e4:	2301      	movs	r3, #1
 80033e6:	e030      	b.n	800344a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 80033e8:	f7fe fbe2 	bl	8001bb0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d302      	bcc.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d11d      	bne.n	800343a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003408:	2b40      	cmp	r3, #64	@ 0x40
 800340a:	d016      	beq.n	800343a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	@ 0x30
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f043 0220 	orr.w	r2, r3, #32
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003436:	2301      	movs	r3, #1
 8003438:	e007      	b.n	800344a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003444:	2b40      	cmp	r3, #64	@ 0x40
 8003446:	d1ae      	bne.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8003448:	2300      	movs	r3, #0
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <I2C_IsAcknowledgeFailed>:
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003468:	d11b      	bne.n	80034a2 <I2C_IsAcknowledgeFailed+0x50>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003472:	615a      	str	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	@ 0x40
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <I2C_IsAcknowledgeFailed+0x52>
 80034a2:	2300      	movs	r3, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_RCC_OscConfig>:
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x12>
 80034be:	2301      	movs	r3, #1
 80034c0:	e267      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d075      	beq.n	80035ba <HAL_RCC_OscConfig+0x10a>
 80034ce:	4b88      	ldr	r3, [pc, #544]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d00c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x44>
 80034da:	4b85      	ldr	r3, [pc, #532]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d112      	bne.n	800350c <HAL_RCC_OscConfig+0x5c>
 80034e6:	4b82      	ldr	r3, [pc, #520]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034f2:	d10b      	bne.n	800350c <HAL_RCC_OscConfig+0x5c>
 80034f4:	4b7e      	ldr	r3, [pc, #504]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d05b      	beq.n	80035b8 <HAL_RCC_OscConfig+0x108>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d157      	bne.n	80035b8 <HAL_RCC_OscConfig+0x108>
 8003508:	2301      	movs	r3, #1
 800350a:	e242      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x74>
 8003516:	4b76      	ldr	r3, [pc, #472]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a75      	ldr	r2, [pc, #468]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e01d      	b.n	8003560 <HAL_RCC_OscConfig+0xb0>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x98>
 800352e:	4b70      	ldr	r3, [pc, #448]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a6f      	ldr	r2, [pc, #444]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b6d      	ldr	r3, [pc, #436]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a6c      	ldr	r2, [pc, #432]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e00b      	b.n	8003560 <HAL_RCC_OscConfig+0xb0>
 8003548:	4b69      	ldr	r3, [pc, #420]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a68      	ldr	r2, [pc, #416]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 800354e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b66      	ldr	r3, [pc, #408]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a65      	ldr	r2, [pc, #404]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 800355a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_RCC_OscConfig+0xe0>
 8003568:	f7fe fb22 	bl	8001bb0 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xd2>
 8003570:	f7fe fb1e 	bl	8001bb0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	@ 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xd2>
 800357e:	2303      	movs	r3, #3
 8003580:	e207      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003582:	4b5b      	ldr	r3, [pc, #364]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0xc0>
 800358e:	e014      	b.n	80035ba <HAL_RCC_OscConfig+0x10a>
 8003590:	f7fe fb0e 	bl	8001bb0 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xfa>
 8003598:	f7fe fb0a 	bl	8001bb0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	@ 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xfa>
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1f3      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 80035aa:	4b51      	ldr	r3, [pc, #324]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0xe8>
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x10a>
 80035b8:	bf00      	nop
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_OscConfig+0x1de>
 80035c6:	4b4a      	ldr	r3, [pc, #296]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_RCC_OscConfig+0x13a>
 80035d2:	4b47      	ldr	r3, [pc, #284]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d11c      	bne.n	8003618 <HAL_RCC_OscConfig+0x168>
 80035de:	4b44      	ldr	r3, [pc, #272]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <HAL_RCC_OscConfig+0x168>
 80035ea:	4b41      	ldr	r3, [pc, #260]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_RCC_OscConfig+0x152>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x152>
 80035fe:	2301      	movs	r3, #1
 8003600:	e1c7      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003602:	4b3b      	ldr	r3, [pc, #236]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4937      	ldr	r1, [pc, #220]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
 8003616:	e03a      	b.n	800368e <HAL_RCC_OscConfig+0x1de>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_OscConfig+0x1b2>
 8003620:	4b34      	ldr	r3, [pc, #208]	@ (80036f4 <HAL_RCC_OscConfig+0x244>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f7fe fac3 	bl	8001bb0 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x190>
 800362e:	f7fe fabf 	bl	8001bb0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x190>
 800363c:	2303      	movs	r3, #3
 800363e:	e1a8      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003640:	4b2b      	ldr	r3, [pc, #172]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x17e>
 800364c:	4b28      	ldr	r3, [pc, #160]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4925      	ldr	r1, [pc, #148]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e015      	b.n	800368e <HAL_RCC_OscConfig+0x1de>
 8003662:	4b24      	ldr	r3, [pc, #144]	@ (80036f4 <HAL_RCC_OscConfig+0x244>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	f7fe faa2 	bl	8001bb0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1d2>
 8003670:	f7fe fa9e 	bl	8001bb0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1d2>
 800367e:	2303      	movs	r3, #3
 8003680:	e187      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003682:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1c0>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d036      	beq.n	8003708 <HAL_RCC_OscConfig+0x258>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <HAL_RCC_OscConfig+0x220>
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <HAL_RCC_OscConfig+0x248>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f7fe fa82 	bl	8001bb0 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x212>
 80036b0:	f7fe fa7e 	bl	8001bb0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x212>
 80036be:	2303      	movs	r3, #3
 80036c0:	e167      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 80036c2:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x200>
 80036ce:	e01b      	b.n	8003708 <HAL_RCC_OscConfig+0x258>
 80036d0:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <HAL_RCC_OscConfig+0x248>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f7fe fa6b 	bl	8001bb0 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]
 80036dc:	e00e      	b.n	80036fc <HAL_RCC_OscConfig+0x24c>
 80036de:	f7fe fa67 	bl	8001bb0 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d907      	bls.n	80036fc <HAL_RCC_OscConfig+0x24c>
 80036ec:	2303      	movs	r3, #3
 80036ee:	e150      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 80036f0:	40023800 	.word	0x40023800
 80036f4:	42470000 	.word	0x42470000
 80036f8:	42470e80 	.word	0x42470e80
 80036fc:	4b88      	ldr	r3, [pc, #544]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ea      	bne.n	80036de <HAL_RCC_OscConfig+0x22e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8097 	beq.w	8003844 <HAL_RCC_OscConfig+0x394>
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]
 800371a:	4b81      	ldr	r3, [pc, #516]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_RCC_OscConfig+0x296>
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	4b7d      	ldr	r3, [pc, #500]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	4a7c      	ldr	r2, [pc, #496]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	@ 0x40
 8003736:	4b7a      	ldr	r3, [pc, #488]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
 8003746:	4b77      	ldr	r3, [pc, #476]	@ (8003924 <HAL_RCC_OscConfig+0x474>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d118      	bne.n	8003784 <HAL_RCC_OscConfig+0x2d4>
 8003752:	4b74      	ldr	r3, [pc, #464]	@ (8003924 <HAL_RCC_OscConfig+0x474>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a73      	ldr	r2, [pc, #460]	@ (8003924 <HAL_RCC_OscConfig+0x474>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	f7fe fa27 	bl	8001bb0 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x2c8>
 8003766:	f7fe fa23 	bl	8001bb0 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x2c8>
 8003774:	2303      	movs	r3, #3
 8003776:	e10c      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003778:	4b6a      	ldr	r3, [pc, #424]	@ (8003924 <HAL_RCC_OscConfig+0x474>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x2b6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x2ea>
 800378c:	4b64      	ldr	r3, [pc, #400]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003790:	4a63      	ldr	r2, [pc, #396]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	@ 0x70
 8003798:	e01c      	b.n	80037d4 <HAL_RCC_OscConfig+0x324>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x30c>
 80037a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80037a8:	f043 0304 	orr.w	r3, r3, #4
 80037ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ba:	e00b      	b.n	80037d4 <HAL_RCC_OscConfig+0x324>
 80037bc:	4b58      	ldr	r3, [pc, #352]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c0:	4a57      	ldr	r2, [pc, #348]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c8:	4b55      	ldr	r3, [pc, #340]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	4a54      	ldr	r2, [pc, #336]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80037ce:	f023 0304 	bic.w	r3, r3, #4
 80037d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d015      	beq.n	8003808 <HAL_RCC_OscConfig+0x358>
 80037dc:	f7fe f9e8 	bl	8001bb0 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_OscConfig+0x34a>
 80037e4:	f7fe f9e4 	bl	8001bb0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x34a>
 80037f6:	2303      	movs	r3, #3
 80037f8:	e0cb      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 80037fa:	4b49      	ldr	r3, [pc, #292]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0ee      	beq.n	80037e4 <HAL_RCC_OscConfig+0x334>
 8003806:	e014      	b.n	8003832 <HAL_RCC_OscConfig+0x382>
 8003808:	f7fe f9d2 	bl	8001bb0 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]
 800380e:	e00a      	b.n	8003826 <HAL_RCC_OscConfig+0x376>
 8003810:	f7fe f9ce 	bl	8001bb0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x376>
 8003822:	2303      	movs	r3, #3
 8003824:	e0b5      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003826:	4b3e      	ldr	r3, [pc, #248]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1ee      	bne.n	8003810 <HAL_RCC_OscConfig+0x360>
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d105      	bne.n	8003844 <HAL_RCC_OscConfig+0x394>
 8003838:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	4a38      	ldr	r2, [pc, #224]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 800383e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003842:	6413      	str	r3, [r2, #64]	@ 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80a1 	beq.w	8003990 <HAL_RCC_OscConfig+0x4e0>
 800384e:	4b34      	ldr	r3, [pc, #208]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b08      	cmp	r3, #8
 8003858:	d05c      	beq.n	8003914 <HAL_RCC_OscConfig+0x464>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d141      	bne.n	80038e6 <HAL_RCC_OscConfig+0x436>
 8003862:	4b31      	ldr	r3, [pc, #196]	@ (8003928 <HAL_RCC_OscConfig+0x478>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f7fe f9a2 	bl	8001bb0 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x3d2>
 8003870:	f7fe f99e 	bl	8001bb0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x3d2>
 800387e:	2303      	movs	r3, #3
 8003880:	e087      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003882:	4b27      	ldr	r3, [pc, #156]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x3c0>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	019b      	lsls	r3, r3, #6
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	3b01      	subs	r3, #1
 80038a8:	041b      	lsls	r3, r3, #16
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	491b      	ldr	r1, [pc, #108]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
 80038b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <HAL_RCC_OscConfig+0x478>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f7fe f977 	bl	8001bb0 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x428>
 80038c6:	f7fe f973 	bl	8001bb0 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x428>
 80038d4:	2303      	movs	r3, #3
 80038d6:	e05c      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 80038d8:	4b11      	ldr	r3, [pc, #68]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x416>
 80038e4:	e054      	b.n	8003990 <HAL_RCC_OscConfig+0x4e0>
 80038e6:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <HAL_RCC_OscConfig+0x478>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f7fe f960 	bl	8001bb0 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x456>
 80038f4:	f7fe f95c 	bl	8001bb0 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x456>
 8003902:	2303      	movs	r3, #3
 8003904:	e045      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003906:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <HAL_RCC_OscConfig+0x470>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x444>
 8003912:	e03d      	b.n	8003990 <HAL_RCC_OscConfig+0x4e0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d107      	bne.n	800392c <HAL_RCC_OscConfig+0x47c>
 800391c:	2301      	movs	r3, #1
 800391e:	e038      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003920:	40023800 	.word	0x40023800
 8003924:	40007000 	.word	0x40007000
 8003928:	42470060 	.word	0x42470060
 800392c:	4b1b      	ldr	r3, [pc, #108]	@ (800399c <HAL_RCC_OscConfig+0x4ec>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d028      	beq.n	800398c <HAL_RCC_OscConfig+0x4dc>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	429a      	cmp	r2, r3
 8003946:	d121      	bne.n	800398c <HAL_RCC_OscConfig+0x4dc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	429a      	cmp	r2, r3
 8003954:	d11a      	bne.n	800398c <HAL_RCC_OscConfig+0x4dc>
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003962:	0192      	lsls	r2, r2, #6
 8003964:	4293      	cmp	r3, r2
 8003966:	d111      	bne.n	800398c <HAL_RCC_OscConfig+0x4dc>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	3b01      	subs	r3, #1
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	429a      	cmp	r2, r3
 800397a:	d107      	bne.n	800398c <HAL_RCC_OscConfig+0x4dc>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_OscConfig+0x4e0>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x4e2>
 8003990:	2300      	movs	r3, #0
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800

080039a0 <HAL_RCC_ClockConfig>:
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x14>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0cc      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
 80039b4:	4b68      	ldr	r3, [pc, #416]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d90c      	bls.n	80039dc <HAL_RCC_ClockConfig+0x3c>
 80039c2:	4b65      	ldr	r3, [pc, #404]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	4b63      	ldr	r3, [pc, #396]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x3c>
 80039d8:	2301      	movs	r3, #1
 80039da:	e0b8      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x8a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x60>
 80039f4:	4b59      	ldr	r3, [pc, #356]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a58      	ldr	r2, [pc, #352]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039fe:	6093      	str	r3, [r2, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x78>
 8003a0c:	4b53      	ldr	r3, [pc, #332]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a52      	ldr	r2, [pc, #328]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a16:	6093      	str	r3, [r2, #8]
 8003a18:	4b50      	ldr	r3, [pc, #320]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	494d      	ldr	r1, [pc, #308]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d044      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x120>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xae>
 8003a3e:	4b47      	ldr	r3, [pc, #284]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d119      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e07f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_ClockConfig+0xbe>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xce>
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e06f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e067      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
 8003a7e:	4b37      	ldr	r3, [pc, #220]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f023 0203 	bic.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4934      	ldr	r1, [pc, #208]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]
 8003a90:	f7fe f88e 	bl	8001bb0 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_ClockConfig+0x10e>
 8003a98:	f7fe f88a 	bl	8001bb0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_ClockConfig+0x10e>
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e04f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
 8003aae:	4b2b      	ldr	r3, [pc, #172]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 020c 	and.w	r2, r3, #12
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1eb      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xf8>
 8003ac0:	4b25      	ldr	r3, [pc, #148]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d20c      	bcs.n	8003ae8 <HAL_RCC_ClockConfig+0x148>
 8003ace:	4b22      	ldr	r3, [pc, #136]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	4b20      	ldr	r3, [pc, #128]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x148>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e032      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x166>
 8003af4:	4b19      	ldr	r3, [pc, #100]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4916      	ldr	r1, [pc, #88]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x186>
 8003b12:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	490e      	ldr	r1, [pc, #56]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
 8003b26:	f000 f821 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	490a      	ldr	r1, [pc, #40]	@ (8003b60 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3e:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd ffee 	bl	8001b28 <HAL_InitTick>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023c00 	.word	0x40023c00
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	080057ac 	.word	0x080057ac
 8003b64:	20000004 	.word	0x20000004
 8003b68:	20000008 	.word	0x20000008

08003b6c <HAL_RCC_GetSysClockFreq>:
 8003b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b70:	b090      	sub	sp, #64	@ 0x40
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	2300      	movs	r3, #0
 8003b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b78:	2300      	movs	r3, #0
 8003b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b80:	2300      	movs	r3, #0
 8003b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b84:	4b59      	ldr	r3, [pc, #356]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d00d      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x40>
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	f200 80a1 	bhi.w	8003cd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b9e:	e09b      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ba0:	4b53      	ldr	r3, [pc, #332]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ba4:	e09b      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x172>
 8003ba6:	4b53      	ldr	r3, [pc, #332]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003baa:	e098      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x172>
 8003bac:	4b4f      	ldr	r3, [pc, #316]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d028      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0xa8>
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	2200      	movs	r2, #0
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd8:	fb03 f201 	mul.w	r2, r3, r1
 8003bdc:	2300      	movs	r3, #0
 8003bde:	fb00 f303 	mul.w	r3, r0, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	4a43      	ldr	r2, [pc, #268]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bec:	460a      	mov	r2, r1
 8003bee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf2:	4413      	add	r3, r2
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	61fa      	str	r2, [r7, #28]
 8003bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c06:	f7fc fb3b 	bl	8000280 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4613      	mov	r3, r2
 8003c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c12:	e053      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x150>
 8003c14:	4b35      	ldr	r3, [pc, #212]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	617a      	str	r2, [r7, #20]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c26:	f04f 0b00 	mov.w	fp, #0
 8003c2a:	4652      	mov	r2, sl
 8003c2c:	465b      	mov	r3, fp
 8003c2e:	f04f 0000 	mov.w	r0, #0
 8003c32:	f04f 0100 	mov.w	r1, #0
 8003c36:	0159      	lsls	r1, r3, #5
 8003c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3c:	0150      	lsls	r0, r2, #5
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	ebb2 080a 	subs.w	r8, r2, sl
 8003c46:	eb63 090b 	sbc.w	r9, r3, fp
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c5e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c62:	eb63 0509 	sbc.w	r5, r3, r9
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	00eb      	lsls	r3, r5, #3
 8003c70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c74:	00e2      	lsls	r2, r4, #3
 8003c76:	4614      	mov	r4, r2
 8003c78:	461d      	mov	r5, r3
 8003c7a:	eb14 030a 	adds.w	r3, r4, sl
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	eb45 030b 	adc.w	r3, r5, fp
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c92:	4629      	mov	r1, r5
 8003c94:	028b      	lsls	r3, r1, #10
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	028a      	lsls	r2, r1, #10
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	60fa      	str	r2, [r7, #12]
 8003cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cb0:	f7fc fae6 	bl	8000280 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ccc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x172>
 8003cd8:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cdc:	bf00      	nop
 8003cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3740      	adds	r7, #64	@ 0x40
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	017d7840 	.word	0x017d7840

08003cf8 <HAL_RCC_GetHCLKFreq>:
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4b03      	ldr	r3, [pc, #12]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000004 	.word	0x20000004

08003d10 <HAL_RCC_GetPCLK1Freq>:
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	f7ff fff0 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0a9b      	lsrs	r3, r3, #10
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	080057bc 	.word	0x080057bc

08003d38 <HAL_RCC_GetPCLK2Freq>:
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	f7ff ffdc 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0b5b      	lsrs	r3, r3, #13
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	@ (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	080057bc 	.word	0x080057bc

08003d60 <HAL_UART_Init>:
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x12>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e042      	b.n	8003df8 <HAL_UART_Init+0x98>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_UART_Init+0x2c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fdf4 	bl	8001974 <HAL_UART_MspInit>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	@ 0x24
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fdbd 	bl	8004924 <UART_SetConfig>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003db8:	611a      	str	r2, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dc8:	615a      	str	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	645a      	str	r2, [r3, #68]	@ 0x44
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003df6:	2300      	movs	r3, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_UART_Transmit>:
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	@ 0x28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	80fb      	strh	r3, [r7, #6]
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d175      	bne.n	8003f0c <HAL_UART_Transmit+0x10c>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Transmit+0x2c>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x30>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e06e      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2221      	movs	r2, #33	@ 0x21
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e3e:	f7fd feb7 	bl	8001bb0 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	849a      	strh	r2, [r3, #36]	@ 0x24
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e58:	d108      	bne.n	8003e6c <HAL_UART_Transmit+0x6c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <HAL_UART_Transmit+0x6c>
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e003      	b.n	8003e74 <HAL_UART_Transmit+0x74>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e02e      	b.n	8003ed4 <HAL_UART_Transmit+0xd4>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	@ 0x80
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fb1f 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_UART_Transmit+0x98>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e94:	2303      	movs	r3, #3
 8003e96:	e03a      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_UART_Transmit+0xb6>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	e007      	b.n	8003ec6 <HAL_UART_Transmit+0xc6>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1cb      	bne.n	8003e76 <HAL_UART_Transmit+0x76>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2140      	movs	r1, #64	@ 0x40
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 faeb 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_UART_Transmit+0x100>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003efc:	2303      	movs	r3, #3
 8003efe:	e006      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e000      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_UART_Receive_IT>:
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	4613      	mov	r3, r2
 8003f22:	80fb      	strh	r3, [r7, #6]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d112      	bne.n	8003f56 <HAL_UART_Receive_IT+0x40>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_UART_Receive_IT+0x26>
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_UART_Receive_IT+0x2a>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e00b      	b.n	8003f58 <HAL_UART_Receive_IT+0x42>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fb12 	bl	8004576 <UART_Start_Receive_IT>
 8003f52:	4603      	mov	r3, r0
 8003f54:	e000      	b.n	8003f58 <HAL_UART_Receive_IT+0x42>
 8003f56:	2302      	movs	r3, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_UART_IRQHandler>:
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b0ba      	sub	sp, #232	@ 0xe8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x66>
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x66>
 8003fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x66>
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fbf2 	bl	80047a8 <UART_Receive_IT>
 8003fc4:	e25b      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
 8003fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80de 	beq.w	800418c <HAL_UART_IRQHandler+0x22c>
 8003fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <HAL_UART_IRQHandler+0x8a>
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80d1 	beq.w	800418c <HAL_UART_IRQHandler+0x22c>
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_UART_IRQHandler+0xae>
 8003ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_UART_IRQHandler+0xae>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <HAL_UART_IRQHandler+0xd2>
 800401a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_UART_IRQHandler+0xd2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	f043 0202 	orr.w	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_UART_IRQHandler+0xf6>
 800403e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_UART_IRQHandler+0xf6>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f043 0204 	orr.w	r2, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d011      	beq.n	8004086 <HAL_UART_IRQHandler+0x126>
 8004062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <HAL_UART_IRQHandler+0x11a>
 800406e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_UART_IRQHandler+0x126>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	f043 0208 	orr.w	r2, r3, #8
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 81f2 	beq.w	8004474 <HAL_UART_IRQHandler+0x514>
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_UART_IRQHandler+0x14e>
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_UART_IRQHandler+0x14e>
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fb7d 	bl	80047a8 <UART_Receive_IT>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b8:	2b40      	cmp	r3, #64	@ 0x40
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <HAL_UART_IRQHandler+0x17a>
 80040d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d04f      	beq.n	800417a <HAL_UART_IRQHandler+0x21a>
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fa85 	bl	80045ea <UART_EndRxTransfer>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b40      	cmp	r3, #64	@ 0x40
 80040ec:	d141      	bne.n	8004172 <HAL_UART_IRQHandler+0x212>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3314      	adds	r3, #20
 80040f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800410c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800411a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800411e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1d9      	bne.n	80040ee <HAL_UART_IRQHandler+0x18e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <HAL_UART_IRQHandler+0x20a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	4a7e      	ldr	r2, [pc, #504]	@ (8004340 <HAL_UART_IRQHandler+0x3e0>)
 8004148:	651a      	str	r2, [r3, #80]	@ 0x50
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd fedf 	bl	8001f12 <HAL_DMA_Abort_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_UART_IRQHandler+0x228>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
 8004168:	e00e      	b.n	8004188 <HAL_UART_IRQHandler+0x228>
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f994 	bl	8004498 <HAL_UART_ErrorCallback>
 8004170:	e00a      	b.n	8004188 <HAL_UART_IRQHandler+0x228>
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f990 	bl	8004498 <HAL_UART_ErrorCallback>
 8004178:	e006      	b.n	8004188 <HAL_UART_IRQHandler+0x228>
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f98c 	bl	8004498 <HAL_UART_ErrorCallback>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
 8004186:	e175      	b.n	8004474 <HAL_UART_IRQHandler+0x514>
 8004188:	bf00      	nop
 800418a:	e173      	b.n	8004474 <HAL_UART_IRQHandler+0x514>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	2b01      	cmp	r3, #1
 8004192:	f040 814f 	bne.w	8004434 <HAL_UART_IRQHandler+0x4d4>
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8148 	beq.w	8004434 <HAL_UART_IRQHandler+0x4d4>
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8141 	beq.w	8004434 <HAL_UART_IRQHandler+0x4d4>
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d2:	2b40      	cmp	r3, #64	@ 0x40
 80041d4:	f040 80b6 	bne.w	8004344 <HAL_UART_IRQHandler+0x3e4>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80041e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8145 	beq.w	8004478 <HAL_UART_IRQHandler+0x518>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041f6:	429a      	cmp	r2, r3
 80041f8:	f080 813e 	bcs.w	8004478 <HAL_UART_IRQHandler+0x518>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004202:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420e:	f000 8088 	beq.w	8004322 <HAL_UART_IRQHandler+0x3c2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	330c      	adds	r3, #12
 8004218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800421c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800422c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800423e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004246:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800424a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1d9      	bne.n	8004212 <HAL_UART_IRQHandler+0x2b2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	677b      	str	r3, [r7, #116]	@ 0x74
 8004266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	673b      	str	r3, [r7, #112]	@ 0x70
 800426e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004282:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004286:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004288:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800428a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e1      	bne.n	800425e <HAL_UART_IRQHandler+0x2fe>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3314      	adds	r3, #20
 80042a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80042a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80042cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e3      	bne.n	800429a <HAL_UART_IRQHandler+0x33a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004304:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004306:	657b      	str	r3, [r7, #84]	@ 0x54
 8004308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800430a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	653b      	str	r3, [r7, #80]	@ 0x50
 8004312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e3      	bne.n	80042e0 <HAL_UART_IRQHandler+0x380>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd fd88 	bl	8001e32 <HAL_DMA_Abort>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	635a      	str	r2, [r3, #52]	@ 0x34
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004330:	b29b      	uxth	r3, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f8b7 	bl	80044ac <HAL_UARTEx_RxEventCallback>
 800433e:	e09b      	b.n	8004478 <HAL_UART_IRQHandler+0x518>
 8004340:	080046b1 	.word	0x080046b1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800434c:	b29b      	uxth	r3, r3
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 808e 	beq.w	800447c <HAL_UART_IRQHandler+0x51c>
 8004360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8089 	beq.w	800447c <HAL_UART_IRQHandler+0x51c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
 800437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800438e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004390:	643b      	str	r3, [r7, #64]	@ 0x40
 8004392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800439c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e3      	bne.n	800436a <HAL_UART_IRQHandler+0x40a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3314      	adds	r3, #20
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	623b      	str	r3, [r7, #32]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3314      	adds	r3, #20
 80043c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e3      	bne.n	80043a2 <HAL_UART_IRQHandler+0x442>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0310 	bic.w	r3, r3, #16
 80043fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800440c:	61fa      	str	r2, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e3      	bne.n	80043e8 <HAL_UART_IRQHandler+0x488>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	635a      	str	r2, [r3, #52]	@ 0x34
 8004426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f83d 	bl	80044ac <HAL_UARTEx_RxEventCallback>
 8004432:	e023      	b.n	800447c <HAL_UART_IRQHandler+0x51c>
 8004434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_UART_IRQHandler+0x4f4>
 8004440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_UART_IRQHandler+0x4f4>
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f943 	bl	80046d8 <UART_Transmit_IT>
 8004452:	e014      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <HAL_UART_IRQHandler+0x51e>
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_UART_IRQHandler+0x51e>
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f983 	bl	8004778 <UART_EndTransmit_IT>
 8004472:	e004      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
 8004474:	bf00      	nop
 8004476:	e002      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
 800447c:	bf00      	nop
 800447e:	37e8      	adds	r7, #232	@ 0xe8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_TxCpltCallback>:
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_UART_ErrorCallback>:
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_UARTEx_RxEventCallback>:
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <UART_WaitOnFlagUntilTimeout>:
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71fb      	strb	r3, [r7, #7]
 80044d4:	e03b      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0x8a>
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d037      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0x8a>
 80044de:	f7fd fb67 	bl	8001bb0 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	6a3a      	ldr	r2, [r7, #32]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x34>
 80044f4:	2303      	movs	r3, #3
 80044f6:	e03a      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xaa>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d023      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b80      	cmp	r3, #128	@ 0x80
 800450a:	d020      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0x8a>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b40      	cmp	r3, #64	@ 0x40
 8004510:	d01d      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b08      	cmp	r3, #8
 800451e:	d116      	bne.n	800454e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f857 	bl	80045ea <UART_EndRxTransfer>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2208      	movs	r2, #8
 8004540:	645a      	str	r2, [r3, #68]	@ 0x44
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800454a:	2301      	movs	r3, #1
 800454c:	e00f      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xaa>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4013      	ands	r3, r2
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	429a      	cmp	r2, r3
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	429a      	cmp	r2, r3
 800456a:	d0b4      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x12>
 800456c:	2300      	movs	r3, #0
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <UART_Start_Receive_IT>:
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	4613      	mov	r3, r2
 8004582:	80fb      	strh	r3, [r7, #6]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	629a      	str	r2, [r3, #40]	@ 0x28
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	88fa      	ldrh	r2, [r7, #6]
 8004594:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	645a      	str	r2, [r3, #68]	@ 0x44
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2222      	movs	r2, #34	@ 0x22
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <UART_Start_Receive_IT+0x46>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045ba:	60da      	str	r2, [r3, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	615a      	str	r2, [r3, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0220 	orr.w	r2, r2, #32
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	2300      	movs	r3, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <UART_EndRxTransfer>:
 80045ea:	b480      	push	{r7}
 80045ec:	b095      	sub	sp, #84	@ 0x54
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	633b      	str	r3, [r7, #48]	@ 0x30
 8004602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004612:	643a      	str	r2, [r7, #64]	@ 0x40
 8004614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_EndRxTransfer+0x8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	623b      	str	r3, [r7, #32]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3314      	adds	r3, #20
 8004644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800464a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800464c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <UART_EndRxTransfer+0x3c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	2b01      	cmp	r3, #1
 8004660:	d119      	bne.n	8004696 <UART_EndRxTransfer+0xac>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f023 0310 	bic.w	r3, r3, #16
 8004678:	647b      	str	r3, [r7, #68]	@ 0x44
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004682:	61ba      	str	r2, [r7, #24]
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	6979      	ldr	r1, [r7, #20]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e5      	bne.n	8004662 <UART_EndRxTransfer+0x78>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80046a4:	bf00      	nop
 80046a6:	3754      	adds	r7, #84	@ 0x54
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <UART_DMAAbortOnError>:
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	84da      	strh	r2, [r3, #38]	@ 0x26
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fee4 	bl	8004498 <HAL_UART_ErrorCallback>
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UART_Transmit_IT>:
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b21      	cmp	r3, #33	@ 0x21
 80046ea:	d13e      	bne.n	800476a <UART_Transmit_IT+0x92>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f4:	d114      	bne.n	8004720 <UART_Transmit_IT+0x48>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d110      	bne.n	8004720 <UART_Transmit_IT+0x48>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	1c9a      	adds	r2, r3, #2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]
 800471e:	e008      	b.n	8004732 <UART_Transmit_IT+0x5a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6211      	str	r1, [r2, #32]
 800472a:	781a      	ldrb	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29b      	uxth	r3, r3
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	4619      	mov	r1, r3
 8004740:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10f      	bne.n	8004766 <UART_Transmit_IT+0x8e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	2300      	movs	r3, #0
 8004768:	e000      	b.n	800476c <UART_Transmit_IT+0x94>
 800476a:	2302      	movs	r3, #2
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <UART_EndTransmit_IT>:
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800478e:	60da      	str	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fe73 	bl	8004484 <HAL_UART_TxCpltCallback>
 800479e:	2300      	movs	r3, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <UART_Receive_IT>:
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08c      	sub	sp, #48	@ 0x30
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b22      	cmp	r3, #34	@ 0x22
 80047ba:	f040 80ae 	bne.w	800491a <UART_Receive_IT+0x172>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c6:	d117      	bne.n	80047f8 <UART_Receive_IT+0x50>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d113      	bne.n	80047f8 <UART_Receive_IT+0x50>
 80047d0:	2300      	movs	r3, #0
 80047d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ea:	801a      	strh	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	1c9a      	adds	r2, r3, #2
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80047f6:	e026      	b.n	8004846 <UART_Receive_IT+0x9e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fe:	2300      	movs	r3, #0
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800480a:	d007      	beq.n	800481c <UART_Receive_IT+0x74>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <UART_Receive_IT+0x82>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <UART_Receive_IT+0x82>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	e008      	b.n	800483c <UART_Receive_IT+0x94>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004836:	b2da      	uxtb	r2, r3
 8004838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	629a      	str	r2, [r3, #40]	@ 0x28
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29b      	uxth	r3, r3
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	4619      	mov	r1, r3
 8004854:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004856:	2b00      	cmp	r3, #0
 8004858:	d15d      	bne.n	8004916 <UART_Receive_IT+0x16e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0220 	bic.w	r2, r2, #32
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004878:	60da      	str	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	615a      	str	r2, [r3, #20]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	635a      	str	r2, [r3, #52]	@ 0x34
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489c:	2b01      	cmp	r3, #1
 800489e:	d135      	bne.n	800490c <UART_Receive_IT+0x164>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f023 0310 	bic.w	r3, r3, #16
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c6:	623a      	str	r2, [r7, #32]
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	69f9      	ldr	r1, [r7, #28]
 80048cc:	6a3a      	ldr	r2, [r7, #32]
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e5      	bne.n	80048a6 <UART_Receive_IT+0xfe>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d10a      	bne.n	80048fe <UART_Receive_IT+0x156>
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff fdd1 	bl	80044ac <HAL_UARTEx_RxEventCallback>
 800490a:	e002      	b.n	8004912 <UART_Receive_IT+0x16a>
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fc fbcf 	bl	80010b0 <HAL_UART_RxCpltCallback>
 8004912:	2300      	movs	r3, #0
 8004914:	e002      	b.n	800491c <UART_Receive_IT+0x174>
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <UART_Receive_IT+0x174>
 800491a:	2302      	movs	r3, #2
 800491c:	4618      	mov	r0, r3
 800491e:	3730      	adds	r7, #48	@ 0x30
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_SetConfig>:
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b0c0      	sub	sp, #256	@ 0x100
 800492a:	af00      	add	r7, sp, #0
 800492c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	68d9      	ldr	r1, [r3, #12]
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	ea40 0301 	orr.w	r3, r0, r1
 800494c:	6113      	str	r3, [r2, #16]
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800497c:	f021 010c 	bic.w	r1, r1, #12
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800498a:	430b      	orrs	r3, r1
 800498c:	60d3      	str	r3, [r2, #12]
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	6999      	ldr	r1, [r3, #24]
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	ea40 0301 	orr.w	r3, r0, r1
 80049aa:	6153      	str	r3, [r2, #20]
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b8f      	ldr	r3, [pc, #572]	@ (8004bf0 <UART_SetConfig+0x2cc>)
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d005      	beq.n	80049c4 <UART_SetConfig+0xa0>
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b8d      	ldr	r3, [pc, #564]	@ (8004bf4 <UART_SetConfig+0x2d0>)
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d104      	bne.n	80049ce <UART_SetConfig+0xaa>
 80049c4:	f7ff f9b8 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 80049c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049cc:	e003      	b.n	80049d6 <UART_SetConfig+0xb2>
 80049ce:	f7ff f99f 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 80049d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e0:	f040 810c 	bne.w	8004bfc <UART_SetConfig+0x2d8>
 80049e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049f6:	4622      	mov	r2, r4
 80049f8:	462b      	mov	r3, r5
 80049fa:	1891      	adds	r1, r2, r2
 80049fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049fe:	415b      	adcs	r3, r3
 8004a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a06:	4621      	mov	r1, r4
 8004a08:	eb12 0801 	adds.w	r8, r2, r1
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb43 0901 	adc.w	r9, r3, r1
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a26:	4690      	mov	r8, r2
 8004a28:	4699      	mov	r9, r3
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	eb18 0303 	adds.w	r3, r8, r3
 8004a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a34:	462b      	mov	r3, r5
 8004a36:	eb49 0303 	adc.w	r3, r9, r3
 8004a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a52:	460b      	mov	r3, r1
 8004a54:	18db      	adds	r3, r3, r3
 8004a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a58:	4613      	mov	r3, r2
 8004a5a:	eb42 0303 	adc.w	r3, r2, r3
 8004a5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a68:	f7fb fc0a 	bl	8000280 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4b61      	ldr	r3, [pc, #388]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004a72:	fba3 2302 	umull	r2, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	011c      	lsls	r4, r3, #4
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	1891      	adds	r1, r2, r2
 8004a92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a94:	415b      	adcs	r3, r3
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004abc:	4692      	mov	sl, r2
 8004abe:	469b      	mov	fp, r3
 8004ac0:	4643      	mov	r3, r8
 8004ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004aca:	464b      	mov	r3, r9
 8004acc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	18db      	adds	r3, r3, r3
 8004aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aee:	4613      	mov	r3, r2
 8004af0:	eb42 0303 	adc.w	r3, r2, r3
 8004af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004afe:	f7fb fbbf 	bl	8000280 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4611      	mov	r1, r2
 8004b08:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2264      	movs	r2, #100	@ 0x64
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	1acb      	subs	r3, r1, r3
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b1e:	4b36      	ldr	r3, [pc, #216]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004b20:	fba3 2302 	umull	r2, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b2c:	441c      	add	r4, r3
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b84:	464b      	mov	r3, r9
 8004b86:	460a      	mov	r2, r1
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	18db      	adds	r3, r3, r3
 8004ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004baa:	4613      	mov	r3, r2
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bba:	f7fb fb61 	bl	8000280 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	2164      	movs	r1, #100	@ 0x64
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	3332      	adds	r3, #50	@ 0x32
 8004bd6:	4a08      	ldr	r2, [pc, #32]	@ (8004bf8 <UART_SetConfig+0x2d4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 0207 	and.w	r2, r3, #7
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4422      	add	r2, r4
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	e106      	b.n	8004dfc <UART_SetConfig+0x4d8>
 8004bee:	bf00      	nop
 8004bf0:	40011000 	.word	0x40011000
 8004bf4:	40011400 	.word	0x40011400
 8004bf8:	51eb851f 	.word	0x51eb851f
 8004bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c0e:	4642      	mov	r2, r8
 8004c10:	464b      	mov	r3, r9
 8004c12:	1891      	adds	r1, r2, r2
 8004c14:	6239      	str	r1, [r7, #32]
 8004c16:	415b      	adcs	r3, r3
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c1e:	4641      	mov	r1, r8
 8004c20:	1854      	adds	r4, r2, r1
 8004c22:	4649      	mov	r1, r9
 8004c24:	eb43 0501 	adc.w	r5, r3, r1
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	00eb      	lsls	r3, r5, #3
 8004c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c36:	00e2      	lsls	r2, r4, #3
 8004c38:	4614      	mov	r4, r2
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	18e3      	adds	r3, r4, r3
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c44:	464b      	mov	r3, r9
 8004c46:	eb45 0303 	adc.w	r3, r5, r3
 8004c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	008b      	lsls	r3, r1, #2
 8004c6e:	4621      	mov	r1, r4
 8004c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c74:	4621      	mov	r1, r4
 8004c76:	008a      	lsls	r2, r1, #2
 8004c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c7c:	f7fb fb00 	bl	8000280 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4b60      	ldr	r3, [pc, #384]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004c86:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	011c      	lsls	r4, r3, #4
 8004c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	1891      	adds	r1, r2, r2
 8004ca6:	61b9      	str	r1, [r7, #24]
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	1851      	adds	r1, r2, r1
 8004cb4:	6139      	str	r1, [r7, #16]
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc8:	4659      	mov	r1, fp
 8004cca:	00cb      	lsls	r3, r1, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	00ca      	lsls	r2, r1, #3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d08:	4649      	mov	r1, r9
 8004d0a:	008b      	lsls	r3, r1, #2
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d12:	4641      	mov	r1, r8
 8004d14:	008a      	lsls	r2, r1, #2
 8004d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d1a:	f7fb fab1 	bl	8000280 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	4b38      	ldr	r3, [pc, #224]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004d26:	fba3 2301 	umull	r2, r3, r3, r1
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2264      	movs	r2, #100	@ 0x64
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	1acb      	subs	r3, r1, r3
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	3332      	adds	r3, #50	@ 0x32
 8004d38:	4a33      	ldr	r2, [pc, #204]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d44:	441c      	add	r4, r3
 8004d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	1891      	adds	r1, r2, r2
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	415b      	adcs	r3, r3
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d64:	4641      	mov	r1, r8
 8004d66:	1851      	adds	r1, r2, r1
 8004d68:	6039      	str	r1, [r7, #0]
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	414b      	adcs	r3, r1
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	00cb      	lsls	r3, r1, #3
 8004d80:	4651      	mov	r1, sl
 8004d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d86:	4651      	mov	r1, sl
 8004d88:	00ca      	lsls	r2, r1, #3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4642      	mov	r2, r8
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d96:	464b      	mov	r3, r9
 8004d98:	460a      	mov	r2, r1
 8004d9a:	eb42 0303 	adc.w	r3, r2, r3
 8004d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004daa:	667a      	str	r2, [r7, #100]	@ 0x64
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004db8:	4649      	mov	r1, r9
 8004dba:	008b      	lsls	r3, r1, #2
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	008a      	lsls	r2, r1, #2
 8004dc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004dca:	f7fb fa59 	bl	8000280 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	2164      	movs	r1, #100	@ 0x64
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	3332      	adds	r3, #50	@ 0x32
 8004de6:	4a08      	ldr	r2, [pc, #32]	@ (8004e08 <UART_SetConfig+0x4e4>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	f003 020f 	and.w	r2, r3, #15
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4422      	add	r2, r4
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	bf00      	nop
 8004dfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e02:	46bd      	mov	sp, r7
 8004e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e08:	51eb851f 	.word	0x51eb851f

08004e0c <siprintf>:
 8004e0c:	b40e      	push	{r1, r2, r3}
 8004e0e:	b500      	push	{lr}
 8004e10:	b09c      	sub	sp, #112	@ 0x70
 8004e12:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e14:	9002      	str	r0, [sp, #8]
 8004e16:	9006      	str	r0, [sp, #24]
 8004e18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e1c:	4809      	ldr	r0, [pc, #36]	@ (8004e44 <siprintf+0x38>)
 8004e1e:	9107      	str	r1, [sp, #28]
 8004e20:	9104      	str	r1, [sp, #16]
 8004e22:	4909      	ldr	r1, [pc, #36]	@ (8004e48 <siprintf+0x3c>)
 8004e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e28:	9105      	str	r1, [sp, #20]
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	a902      	add	r1, sp, #8
 8004e30:	f000 f994 	bl	800515c <_svfiprintf_r>
 8004e34:	9b02      	ldr	r3, [sp, #8]
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	b01c      	add	sp, #112	@ 0x70
 8004e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e40:	b003      	add	sp, #12
 8004e42:	4770      	bx	lr
 8004e44:	20000010 	.word	0x20000010
 8004e48:	ffff0208 	.word	0xffff0208

08004e4c <memset>:
 8004e4c:	4402      	add	r2, r0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d100      	bne.n	8004e56 <memset+0xa>
 8004e54:	4770      	bx	lr
 8004e56:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5a:	e7f9      	b.n	8004e50 <memset+0x4>

08004e5c <__errno>:
 8004e5c:	4b01      	ldr	r3, [pc, #4]	@ (8004e64 <__errno+0x8>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000010 	.word	0x20000010

08004e68 <__libc_init_array>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ea0 <__libc_init_array+0x38>)
 8004e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ea4 <__libc_init_array+0x3c>)
 8004e6e:	1b64      	subs	r4, r4, r5
 8004e70:	10a4      	asrs	r4, r4, #2
 8004e72:	2600      	movs	r6, #0
 8004e74:	42a6      	cmp	r6, r4
 8004e76:	d109      	bne.n	8004e8c <__libc_init_array+0x24>
 8004e78:	4d0b      	ldr	r5, [pc, #44]	@ (8004ea8 <__libc_init_array+0x40>)
 8004e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004eac <__libc_init_array+0x44>)
 8004e7c:	f000 fc66 	bl	800574c <_init>
 8004e80:	1b64      	subs	r4, r4, r5
 8004e82:	10a4      	asrs	r4, r4, #2
 8004e84:	2600      	movs	r6, #0
 8004e86:	42a6      	cmp	r6, r4
 8004e88:	d105      	bne.n	8004e96 <__libc_init_array+0x2e>
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e90:	4798      	blx	r3
 8004e92:	3601      	adds	r6, #1
 8004e94:	e7ee      	b.n	8004e74 <__libc_init_array+0xc>
 8004e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e9a:	4798      	blx	r3
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	e7f2      	b.n	8004e86 <__libc_init_array+0x1e>
 8004ea0:	08005800 	.word	0x08005800
 8004ea4:	08005800 	.word	0x08005800
 8004ea8:	08005800 	.word	0x08005800
 8004eac:	08005804 	.word	0x08005804

08004eb0 <__retarget_lock_acquire_recursive>:
 8004eb0:	4770      	bx	lr

08004eb2 <__retarget_lock_release_recursive>:
 8004eb2:	4770      	bx	lr

08004eb4 <_free_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	d041      	beq.n	8004f40 <_free_r+0x8c>
 8004ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec0:	1f0c      	subs	r4, r1, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bfb8      	it	lt
 8004ec6:	18e4      	addlt	r4, r4, r3
 8004ec8:	f000 f8e0 	bl	800508c <__malloc_lock>
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f44 <_free_r+0x90>)
 8004ece:	6813      	ldr	r3, [r2, #0]
 8004ed0:	b933      	cbnz	r3, 8004ee0 <_free_r+0x2c>
 8004ed2:	6063      	str	r3, [r4, #4]
 8004ed4:	6014      	str	r4, [r2, #0]
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004edc:	f000 b8dc 	b.w	8005098 <__malloc_unlock>
 8004ee0:	42a3      	cmp	r3, r4
 8004ee2:	d908      	bls.n	8004ef6 <_free_r+0x42>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	1821      	adds	r1, r4, r0
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	bf01      	itttt	eq
 8004eec:	6819      	ldreq	r1, [r3, #0]
 8004eee:	685b      	ldreq	r3, [r3, #4]
 8004ef0:	1809      	addeq	r1, r1, r0
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	e7ed      	b.n	8004ed2 <_free_r+0x1e>
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b10b      	cbz	r3, 8004f00 <_free_r+0x4c>
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	d9fa      	bls.n	8004ef6 <_free_r+0x42>
 8004f00:	6811      	ldr	r1, [r2, #0]
 8004f02:	1850      	adds	r0, r2, r1
 8004f04:	42a0      	cmp	r0, r4
 8004f06:	d10b      	bne.n	8004f20 <_free_r+0x6c>
 8004f08:	6820      	ldr	r0, [r4, #0]
 8004f0a:	4401      	add	r1, r0
 8004f0c:	1850      	adds	r0, r2, r1
 8004f0e:	4283      	cmp	r3, r0
 8004f10:	6011      	str	r1, [r2, #0]
 8004f12:	d1e0      	bne.n	8004ed6 <_free_r+0x22>
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	6053      	str	r3, [r2, #4]
 8004f1a:	4408      	add	r0, r1
 8004f1c:	6010      	str	r0, [r2, #0]
 8004f1e:	e7da      	b.n	8004ed6 <_free_r+0x22>
 8004f20:	d902      	bls.n	8004f28 <_free_r+0x74>
 8004f22:	230c      	movs	r3, #12
 8004f24:	602b      	str	r3, [r5, #0]
 8004f26:	e7d6      	b.n	8004ed6 <_free_r+0x22>
 8004f28:	6820      	ldr	r0, [r4, #0]
 8004f2a:	1821      	adds	r1, r4, r0
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	bf04      	itt	eq
 8004f30:	6819      	ldreq	r1, [r3, #0]
 8004f32:	685b      	ldreq	r3, [r3, #4]
 8004f34:	6063      	str	r3, [r4, #4]
 8004f36:	bf04      	itt	eq
 8004f38:	1809      	addeq	r1, r1, r0
 8004f3a:	6021      	streq	r1, [r4, #0]
 8004f3c:	6054      	str	r4, [r2, #4]
 8004f3e:	e7ca      	b.n	8004ed6 <_free_r+0x22>
 8004f40:	bd38      	pop	{r3, r4, r5, pc}
 8004f42:	bf00      	nop
 8004f44:	200003b4 	.word	0x200003b4

08004f48 <sbrk_aligned>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8004f88 <sbrk_aligned+0x40>)
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	6831      	ldr	r1, [r6, #0]
 8004f50:	4605      	mov	r5, r0
 8004f52:	b911      	cbnz	r1, 8004f5a <sbrk_aligned+0x12>
 8004f54:	f000 fba6 	bl	80056a4 <_sbrk_r>
 8004f58:	6030      	str	r0, [r6, #0]
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 fba1 	bl	80056a4 <_sbrk_r>
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	d103      	bne.n	8004f6e <sbrk_aligned+0x26>
 8004f66:	f04f 34ff 	mov.w	r4, #4294967295
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	bd70      	pop	{r4, r5, r6, pc}
 8004f6e:	1cc4      	adds	r4, r0, #3
 8004f70:	f024 0403 	bic.w	r4, r4, #3
 8004f74:	42a0      	cmp	r0, r4
 8004f76:	d0f8      	beq.n	8004f6a <sbrk_aligned+0x22>
 8004f78:	1a21      	subs	r1, r4, r0
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 fb92 	bl	80056a4 <_sbrk_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d1f2      	bne.n	8004f6a <sbrk_aligned+0x22>
 8004f84:	e7ef      	b.n	8004f66 <sbrk_aligned+0x1e>
 8004f86:	bf00      	nop
 8004f88:	200003b0 	.word	0x200003b0

08004f8c <_malloc_r>:
 8004f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f90:	1ccd      	adds	r5, r1, #3
 8004f92:	f025 0503 	bic.w	r5, r5, #3
 8004f96:	3508      	adds	r5, #8
 8004f98:	2d0c      	cmp	r5, #12
 8004f9a:	bf38      	it	cc
 8004f9c:	250c      	movcc	r5, #12
 8004f9e:	2d00      	cmp	r5, #0
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	db01      	blt.n	8004fa8 <_malloc_r+0x1c>
 8004fa4:	42a9      	cmp	r1, r5
 8004fa6:	d904      	bls.n	8004fb2 <_malloc_r+0x26>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	6033      	str	r3, [r6, #0]
 8004fac:	2000      	movs	r0, #0
 8004fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005088 <_malloc_r+0xfc>
 8004fb6:	f000 f869 	bl	800508c <__malloc_lock>
 8004fba:	f8d8 3000 	ldr.w	r3, [r8]
 8004fbe:	461c      	mov	r4, r3
 8004fc0:	bb44      	cbnz	r4, 8005014 <_malloc_r+0x88>
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	f7ff ffbf 	bl	8004f48 <sbrk_aligned>
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	4604      	mov	r4, r0
 8004fce:	d158      	bne.n	8005082 <_malloc_r+0xf6>
 8004fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8004fd4:	4627      	mov	r7, r4
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d143      	bne.n	8005062 <_malloc_r+0xd6>
 8004fda:	2c00      	cmp	r4, #0
 8004fdc:	d04b      	beq.n	8005076 <_malloc_r+0xea>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	eb04 0903 	add.w	r9, r4, r3
 8004fe8:	f000 fb5c 	bl	80056a4 <_sbrk_r>
 8004fec:	4581      	cmp	r9, r0
 8004fee:	d142      	bne.n	8005076 <_malloc_r+0xea>
 8004ff0:	6821      	ldr	r1, [r4, #0]
 8004ff2:	1a6d      	subs	r5, r5, r1
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f7ff ffa6 	bl	8004f48 <sbrk_aligned>
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d03a      	beq.n	8005076 <_malloc_r+0xea>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	442b      	add	r3, r5
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	f8d8 3000 	ldr.w	r3, [r8]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	bb62      	cbnz	r2, 8005068 <_malloc_r+0xdc>
 800500e:	f8c8 7000 	str.w	r7, [r8]
 8005012:	e00f      	b.n	8005034 <_malloc_r+0xa8>
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	1b52      	subs	r2, r2, r5
 8005018:	d420      	bmi.n	800505c <_malloc_r+0xd0>
 800501a:	2a0b      	cmp	r2, #11
 800501c:	d917      	bls.n	800504e <_malloc_r+0xc2>
 800501e:	1961      	adds	r1, r4, r5
 8005020:	42a3      	cmp	r3, r4
 8005022:	6025      	str	r5, [r4, #0]
 8005024:	bf18      	it	ne
 8005026:	6059      	strne	r1, [r3, #4]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	bf08      	it	eq
 800502c:	f8c8 1000 	streq.w	r1, [r8]
 8005030:	5162      	str	r2, [r4, r5]
 8005032:	604b      	str	r3, [r1, #4]
 8005034:	4630      	mov	r0, r6
 8005036:	f000 f82f 	bl	8005098 <__malloc_unlock>
 800503a:	f104 000b 	add.w	r0, r4, #11
 800503e:	1d23      	adds	r3, r4, #4
 8005040:	f020 0007 	bic.w	r0, r0, #7
 8005044:	1ac2      	subs	r2, r0, r3
 8005046:	bf1c      	itt	ne
 8005048:	1a1b      	subne	r3, r3, r0
 800504a:	50a3      	strne	r3, [r4, r2]
 800504c:	e7af      	b.n	8004fae <_malloc_r+0x22>
 800504e:	6862      	ldr	r2, [r4, #4]
 8005050:	42a3      	cmp	r3, r4
 8005052:	bf0c      	ite	eq
 8005054:	f8c8 2000 	streq.w	r2, [r8]
 8005058:	605a      	strne	r2, [r3, #4]
 800505a:	e7eb      	b.n	8005034 <_malloc_r+0xa8>
 800505c:	4623      	mov	r3, r4
 800505e:	6864      	ldr	r4, [r4, #4]
 8005060:	e7ae      	b.n	8004fc0 <_malloc_r+0x34>
 8005062:	463c      	mov	r4, r7
 8005064:	687f      	ldr	r7, [r7, #4]
 8005066:	e7b6      	b.n	8004fd6 <_malloc_r+0x4a>
 8005068:	461a      	mov	r2, r3
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	42a3      	cmp	r3, r4
 800506e:	d1fb      	bne.n	8005068 <_malloc_r+0xdc>
 8005070:	2300      	movs	r3, #0
 8005072:	6053      	str	r3, [r2, #4]
 8005074:	e7de      	b.n	8005034 <_malloc_r+0xa8>
 8005076:	230c      	movs	r3, #12
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	4630      	mov	r0, r6
 800507c:	f000 f80c 	bl	8005098 <__malloc_unlock>
 8005080:	e794      	b.n	8004fac <_malloc_r+0x20>
 8005082:	6005      	str	r5, [r0, #0]
 8005084:	e7d6      	b.n	8005034 <_malloc_r+0xa8>
 8005086:	bf00      	nop
 8005088:	200003b4 	.word	0x200003b4

0800508c <__malloc_lock>:
 800508c:	4801      	ldr	r0, [pc, #4]	@ (8005094 <__malloc_lock+0x8>)
 800508e:	f7ff bf0f 	b.w	8004eb0 <__retarget_lock_acquire_recursive>
 8005092:	bf00      	nop
 8005094:	200003ac 	.word	0x200003ac

08005098 <__malloc_unlock>:
 8005098:	4801      	ldr	r0, [pc, #4]	@ (80050a0 <__malloc_unlock+0x8>)
 800509a:	f7ff bf0a 	b.w	8004eb2 <__retarget_lock_release_recursive>
 800509e:	bf00      	nop
 80050a0:	200003ac 	.word	0x200003ac

080050a4 <__ssputs_r>:
 80050a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a8:	688e      	ldr	r6, [r1, #8]
 80050aa:	461f      	mov	r7, r3
 80050ac:	42be      	cmp	r6, r7
 80050ae:	680b      	ldr	r3, [r1, #0]
 80050b0:	4682      	mov	sl, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	4690      	mov	r8, r2
 80050b6:	d82d      	bhi.n	8005114 <__ssputs_r+0x70>
 80050b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050c0:	d026      	beq.n	8005110 <__ssputs_r+0x6c>
 80050c2:	6965      	ldr	r5, [r4, #20]
 80050c4:	6909      	ldr	r1, [r1, #16]
 80050c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050ca:	eba3 0901 	sub.w	r9, r3, r1
 80050ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050d2:	1c7b      	adds	r3, r7, #1
 80050d4:	444b      	add	r3, r9
 80050d6:	106d      	asrs	r5, r5, #1
 80050d8:	429d      	cmp	r5, r3
 80050da:	bf38      	it	cc
 80050dc:	461d      	movcc	r5, r3
 80050de:	0553      	lsls	r3, r2, #21
 80050e0:	d527      	bpl.n	8005132 <__ssputs_r+0x8e>
 80050e2:	4629      	mov	r1, r5
 80050e4:	f7ff ff52 	bl	8004f8c <_malloc_r>
 80050e8:	4606      	mov	r6, r0
 80050ea:	b360      	cbz	r0, 8005146 <__ssputs_r+0xa2>
 80050ec:	6921      	ldr	r1, [r4, #16]
 80050ee:	464a      	mov	r2, r9
 80050f0:	f000 fae8 	bl	80056c4 <memcpy>
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050fe:	81a3      	strh	r3, [r4, #12]
 8005100:	6126      	str	r6, [r4, #16]
 8005102:	6165      	str	r5, [r4, #20]
 8005104:	444e      	add	r6, r9
 8005106:	eba5 0509 	sub.w	r5, r5, r9
 800510a:	6026      	str	r6, [r4, #0]
 800510c:	60a5      	str	r5, [r4, #8]
 800510e:	463e      	mov	r6, r7
 8005110:	42be      	cmp	r6, r7
 8005112:	d900      	bls.n	8005116 <__ssputs_r+0x72>
 8005114:	463e      	mov	r6, r7
 8005116:	6820      	ldr	r0, [r4, #0]
 8005118:	4632      	mov	r2, r6
 800511a:	4641      	mov	r1, r8
 800511c:	f000 faa8 	bl	8005670 <memmove>
 8005120:	68a3      	ldr	r3, [r4, #8]
 8005122:	1b9b      	subs	r3, r3, r6
 8005124:	60a3      	str	r3, [r4, #8]
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	4433      	add	r3, r6
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	2000      	movs	r0, #0
 800512e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005132:	462a      	mov	r2, r5
 8005134:	f000 fad4 	bl	80056e0 <_realloc_r>
 8005138:	4606      	mov	r6, r0
 800513a:	2800      	cmp	r0, #0
 800513c:	d1e0      	bne.n	8005100 <__ssputs_r+0x5c>
 800513e:	6921      	ldr	r1, [r4, #16]
 8005140:	4650      	mov	r0, sl
 8005142:	f7ff feb7 	bl	8004eb4 <_free_r>
 8005146:	230c      	movs	r3, #12
 8005148:	f8ca 3000 	str.w	r3, [sl]
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	e7e9      	b.n	800512e <__ssputs_r+0x8a>
	...

0800515c <_svfiprintf_r>:
 800515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	4698      	mov	r8, r3
 8005162:	898b      	ldrh	r3, [r1, #12]
 8005164:	061b      	lsls	r3, r3, #24
 8005166:	b09d      	sub	sp, #116	@ 0x74
 8005168:	4607      	mov	r7, r0
 800516a:	460d      	mov	r5, r1
 800516c:	4614      	mov	r4, r2
 800516e:	d510      	bpl.n	8005192 <_svfiprintf_r+0x36>
 8005170:	690b      	ldr	r3, [r1, #16]
 8005172:	b973      	cbnz	r3, 8005192 <_svfiprintf_r+0x36>
 8005174:	2140      	movs	r1, #64	@ 0x40
 8005176:	f7ff ff09 	bl	8004f8c <_malloc_r>
 800517a:	6028      	str	r0, [r5, #0]
 800517c:	6128      	str	r0, [r5, #16]
 800517e:	b930      	cbnz	r0, 800518e <_svfiprintf_r+0x32>
 8005180:	230c      	movs	r3, #12
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	b01d      	add	sp, #116	@ 0x74
 800518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518e:	2340      	movs	r3, #64	@ 0x40
 8005190:	616b      	str	r3, [r5, #20]
 8005192:	2300      	movs	r3, #0
 8005194:	9309      	str	r3, [sp, #36]	@ 0x24
 8005196:	2320      	movs	r3, #32
 8005198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800519c:	f8cd 800c 	str.w	r8, [sp, #12]
 80051a0:	2330      	movs	r3, #48	@ 0x30
 80051a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005340 <_svfiprintf_r+0x1e4>
 80051a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051aa:	f04f 0901 	mov.w	r9, #1
 80051ae:	4623      	mov	r3, r4
 80051b0:	469a      	mov	sl, r3
 80051b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051b6:	b10a      	cbz	r2, 80051bc <_svfiprintf_r+0x60>
 80051b8:	2a25      	cmp	r2, #37	@ 0x25
 80051ba:	d1f9      	bne.n	80051b0 <_svfiprintf_r+0x54>
 80051bc:	ebba 0b04 	subs.w	fp, sl, r4
 80051c0:	d00b      	beq.n	80051da <_svfiprintf_r+0x7e>
 80051c2:	465b      	mov	r3, fp
 80051c4:	4622      	mov	r2, r4
 80051c6:	4629      	mov	r1, r5
 80051c8:	4638      	mov	r0, r7
 80051ca:	f7ff ff6b 	bl	80050a4 <__ssputs_r>
 80051ce:	3001      	adds	r0, #1
 80051d0:	f000 80a7 	beq.w	8005322 <_svfiprintf_r+0x1c6>
 80051d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051d6:	445a      	add	r2, fp
 80051d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80051da:	f89a 3000 	ldrb.w	r3, [sl]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 809f 	beq.w	8005322 <_svfiprintf_r+0x1c6>
 80051e4:	2300      	movs	r3, #0
 80051e6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051ee:	f10a 0a01 	add.w	sl, sl, #1
 80051f2:	9304      	str	r3, [sp, #16]
 80051f4:	9307      	str	r3, [sp, #28]
 80051f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80051fc:	4654      	mov	r4, sl
 80051fe:	2205      	movs	r2, #5
 8005200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005204:	484e      	ldr	r0, [pc, #312]	@ (8005340 <_svfiprintf_r+0x1e4>)
 8005206:	f7fa ffeb 	bl	80001e0 <memchr>
 800520a:	9a04      	ldr	r2, [sp, #16]
 800520c:	b9d8      	cbnz	r0, 8005246 <_svfiprintf_r+0xea>
 800520e:	06d0      	lsls	r0, r2, #27
 8005210:	bf44      	itt	mi
 8005212:	2320      	movmi	r3, #32
 8005214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005218:	0711      	lsls	r1, r2, #28
 800521a:	bf44      	itt	mi
 800521c:	232b      	movmi	r3, #43	@ 0x2b
 800521e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005222:	f89a 3000 	ldrb.w	r3, [sl]
 8005226:	2b2a      	cmp	r3, #42	@ 0x2a
 8005228:	d015      	beq.n	8005256 <_svfiprintf_r+0xfa>
 800522a:	9a07      	ldr	r2, [sp, #28]
 800522c:	4654      	mov	r4, sl
 800522e:	2000      	movs	r0, #0
 8005230:	f04f 0c0a 	mov.w	ip, #10
 8005234:	4621      	mov	r1, r4
 8005236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800523a:	3b30      	subs	r3, #48	@ 0x30
 800523c:	2b09      	cmp	r3, #9
 800523e:	d94b      	bls.n	80052d8 <_svfiprintf_r+0x17c>
 8005240:	b1b0      	cbz	r0, 8005270 <_svfiprintf_r+0x114>
 8005242:	9207      	str	r2, [sp, #28]
 8005244:	e014      	b.n	8005270 <_svfiprintf_r+0x114>
 8005246:	eba0 0308 	sub.w	r3, r0, r8
 800524a:	fa09 f303 	lsl.w	r3, r9, r3
 800524e:	4313      	orrs	r3, r2
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	46a2      	mov	sl, r4
 8005254:	e7d2      	b.n	80051fc <_svfiprintf_r+0xa0>
 8005256:	9b03      	ldr	r3, [sp, #12]
 8005258:	1d19      	adds	r1, r3, #4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	9103      	str	r1, [sp, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	bfbb      	ittet	lt
 8005262:	425b      	neglt	r3, r3
 8005264:	f042 0202 	orrlt.w	r2, r2, #2
 8005268:	9307      	strge	r3, [sp, #28]
 800526a:	9307      	strlt	r3, [sp, #28]
 800526c:	bfb8      	it	lt
 800526e:	9204      	strlt	r2, [sp, #16]
 8005270:	7823      	ldrb	r3, [r4, #0]
 8005272:	2b2e      	cmp	r3, #46	@ 0x2e
 8005274:	d10a      	bne.n	800528c <_svfiprintf_r+0x130>
 8005276:	7863      	ldrb	r3, [r4, #1]
 8005278:	2b2a      	cmp	r3, #42	@ 0x2a
 800527a:	d132      	bne.n	80052e2 <_svfiprintf_r+0x186>
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	9203      	str	r2, [sp, #12]
 8005284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005288:	3402      	adds	r4, #2
 800528a:	9305      	str	r3, [sp, #20]
 800528c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005350 <_svfiprintf_r+0x1f4>
 8005290:	7821      	ldrb	r1, [r4, #0]
 8005292:	2203      	movs	r2, #3
 8005294:	4650      	mov	r0, sl
 8005296:	f7fa ffa3 	bl	80001e0 <memchr>
 800529a:	b138      	cbz	r0, 80052ac <_svfiprintf_r+0x150>
 800529c:	9b04      	ldr	r3, [sp, #16]
 800529e:	eba0 000a 	sub.w	r0, r0, sl
 80052a2:	2240      	movs	r2, #64	@ 0x40
 80052a4:	4082      	lsls	r2, r0
 80052a6:	4313      	orrs	r3, r2
 80052a8:	3401      	adds	r4, #1
 80052aa:	9304      	str	r3, [sp, #16]
 80052ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b0:	4824      	ldr	r0, [pc, #144]	@ (8005344 <_svfiprintf_r+0x1e8>)
 80052b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052b6:	2206      	movs	r2, #6
 80052b8:	f7fa ff92 	bl	80001e0 <memchr>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d036      	beq.n	800532e <_svfiprintf_r+0x1d2>
 80052c0:	4b21      	ldr	r3, [pc, #132]	@ (8005348 <_svfiprintf_r+0x1ec>)
 80052c2:	bb1b      	cbnz	r3, 800530c <_svfiprintf_r+0x1b0>
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	3307      	adds	r3, #7
 80052c8:	f023 0307 	bic.w	r3, r3, #7
 80052cc:	3308      	adds	r3, #8
 80052ce:	9303      	str	r3, [sp, #12]
 80052d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d2:	4433      	add	r3, r6
 80052d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052d6:	e76a      	b.n	80051ae <_svfiprintf_r+0x52>
 80052d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80052dc:	460c      	mov	r4, r1
 80052de:	2001      	movs	r0, #1
 80052e0:	e7a8      	b.n	8005234 <_svfiprintf_r+0xd8>
 80052e2:	2300      	movs	r3, #0
 80052e4:	3401      	adds	r4, #1
 80052e6:	9305      	str	r3, [sp, #20]
 80052e8:	4619      	mov	r1, r3
 80052ea:	f04f 0c0a 	mov.w	ip, #10
 80052ee:	4620      	mov	r0, r4
 80052f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052f4:	3a30      	subs	r2, #48	@ 0x30
 80052f6:	2a09      	cmp	r2, #9
 80052f8:	d903      	bls.n	8005302 <_svfiprintf_r+0x1a6>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0c6      	beq.n	800528c <_svfiprintf_r+0x130>
 80052fe:	9105      	str	r1, [sp, #20]
 8005300:	e7c4      	b.n	800528c <_svfiprintf_r+0x130>
 8005302:	fb0c 2101 	mla	r1, ip, r1, r2
 8005306:	4604      	mov	r4, r0
 8005308:	2301      	movs	r3, #1
 800530a:	e7f0      	b.n	80052ee <_svfiprintf_r+0x192>
 800530c:	ab03      	add	r3, sp, #12
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	462a      	mov	r2, r5
 8005312:	4b0e      	ldr	r3, [pc, #56]	@ (800534c <_svfiprintf_r+0x1f0>)
 8005314:	a904      	add	r1, sp, #16
 8005316:	4638      	mov	r0, r7
 8005318:	f3af 8000 	nop.w
 800531c:	1c42      	adds	r2, r0, #1
 800531e:	4606      	mov	r6, r0
 8005320:	d1d6      	bne.n	80052d0 <_svfiprintf_r+0x174>
 8005322:	89ab      	ldrh	r3, [r5, #12]
 8005324:	065b      	lsls	r3, r3, #25
 8005326:	f53f af2d 	bmi.w	8005184 <_svfiprintf_r+0x28>
 800532a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800532c:	e72c      	b.n	8005188 <_svfiprintf_r+0x2c>
 800532e:	ab03      	add	r3, sp, #12
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	462a      	mov	r2, r5
 8005334:	4b05      	ldr	r3, [pc, #20]	@ (800534c <_svfiprintf_r+0x1f0>)
 8005336:	a904      	add	r1, sp, #16
 8005338:	4638      	mov	r0, r7
 800533a:	f000 f879 	bl	8005430 <_printf_i>
 800533e:	e7ed      	b.n	800531c <_svfiprintf_r+0x1c0>
 8005340:	080057c4 	.word	0x080057c4
 8005344:	080057ce 	.word	0x080057ce
 8005348:	00000000 	.word	0x00000000
 800534c:	080050a5 	.word	0x080050a5
 8005350:	080057ca 	.word	0x080057ca

08005354 <_printf_common>:
 8005354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005358:	4616      	mov	r6, r2
 800535a:	4698      	mov	r8, r3
 800535c:	688a      	ldr	r2, [r1, #8]
 800535e:	690b      	ldr	r3, [r1, #16]
 8005360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005364:	4293      	cmp	r3, r2
 8005366:	bfb8      	it	lt
 8005368:	4613      	movlt	r3, r2
 800536a:	6033      	str	r3, [r6, #0]
 800536c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005370:	4607      	mov	r7, r0
 8005372:	460c      	mov	r4, r1
 8005374:	b10a      	cbz	r2, 800537a <_printf_common+0x26>
 8005376:	3301      	adds	r3, #1
 8005378:	6033      	str	r3, [r6, #0]
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	0699      	lsls	r1, r3, #26
 800537e:	bf42      	ittt	mi
 8005380:	6833      	ldrmi	r3, [r6, #0]
 8005382:	3302      	addmi	r3, #2
 8005384:	6033      	strmi	r3, [r6, #0]
 8005386:	6825      	ldr	r5, [r4, #0]
 8005388:	f015 0506 	ands.w	r5, r5, #6
 800538c:	d106      	bne.n	800539c <_printf_common+0x48>
 800538e:	f104 0a19 	add.w	sl, r4, #25
 8005392:	68e3      	ldr	r3, [r4, #12]
 8005394:	6832      	ldr	r2, [r6, #0]
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	42ab      	cmp	r3, r5
 800539a:	dc26      	bgt.n	80053ea <_printf_common+0x96>
 800539c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	3b00      	subs	r3, #0
 80053a4:	bf18      	it	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	0692      	lsls	r2, r2, #26
 80053aa:	d42b      	bmi.n	8005404 <_printf_common+0xb0>
 80053ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053b0:	4641      	mov	r1, r8
 80053b2:	4638      	mov	r0, r7
 80053b4:	47c8      	blx	r9
 80053b6:	3001      	adds	r0, #1
 80053b8:	d01e      	beq.n	80053f8 <_printf_common+0xa4>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	6922      	ldr	r2, [r4, #16]
 80053be:	f003 0306 	and.w	r3, r3, #6
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	bf02      	ittt	eq
 80053c6:	68e5      	ldreq	r5, [r4, #12]
 80053c8:	6833      	ldreq	r3, [r6, #0]
 80053ca:	1aed      	subeq	r5, r5, r3
 80053cc:	68a3      	ldr	r3, [r4, #8]
 80053ce:	bf0c      	ite	eq
 80053d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053d4:	2500      	movne	r5, #0
 80053d6:	4293      	cmp	r3, r2
 80053d8:	bfc4      	itt	gt
 80053da:	1a9b      	subgt	r3, r3, r2
 80053dc:	18ed      	addgt	r5, r5, r3
 80053de:	2600      	movs	r6, #0
 80053e0:	341a      	adds	r4, #26
 80053e2:	42b5      	cmp	r5, r6
 80053e4:	d11a      	bne.n	800541c <_printf_common+0xc8>
 80053e6:	2000      	movs	r0, #0
 80053e8:	e008      	b.n	80053fc <_printf_common+0xa8>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4652      	mov	r2, sl
 80053ee:	4641      	mov	r1, r8
 80053f0:	4638      	mov	r0, r7
 80053f2:	47c8      	blx	r9
 80053f4:	3001      	adds	r0, #1
 80053f6:	d103      	bne.n	8005400 <_printf_common+0xac>
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005400:	3501      	adds	r5, #1
 8005402:	e7c6      	b.n	8005392 <_printf_common+0x3e>
 8005404:	18e1      	adds	r1, r4, r3
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	2030      	movs	r0, #48	@ 0x30
 800540a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800540e:	4422      	add	r2, r4
 8005410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005418:	3302      	adds	r3, #2
 800541a:	e7c7      	b.n	80053ac <_printf_common+0x58>
 800541c:	2301      	movs	r3, #1
 800541e:	4622      	mov	r2, r4
 8005420:	4641      	mov	r1, r8
 8005422:	4638      	mov	r0, r7
 8005424:	47c8      	blx	r9
 8005426:	3001      	adds	r0, #1
 8005428:	d0e6      	beq.n	80053f8 <_printf_common+0xa4>
 800542a:	3601      	adds	r6, #1
 800542c:	e7d9      	b.n	80053e2 <_printf_common+0x8e>
	...

08005430 <_printf_i>:
 8005430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005434:	7e0f      	ldrb	r7, [r1, #24]
 8005436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005438:	2f78      	cmp	r7, #120	@ 0x78
 800543a:	4691      	mov	r9, r2
 800543c:	4680      	mov	r8, r0
 800543e:	460c      	mov	r4, r1
 8005440:	469a      	mov	sl, r3
 8005442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005446:	d807      	bhi.n	8005458 <_printf_i+0x28>
 8005448:	2f62      	cmp	r7, #98	@ 0x62
 800544a:	d80a      	bhi.n	8005462 <_printf_i+0x32>
 800544c:	2f00      	cmp	r7, #0
 800544e:	f000 80d2 	beq.w	80055f6 <_printf_i+0x1c6>
 8005452:	2f58      	cmp	r7, #88	@ 0x58
 8005454:	f000 80b9 	beq.w	80055ca <_printf_i+0x19a>
 8005458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800545c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005460:	e03a      	b.n	80054d8 <_printf_i+0xa8>
 8005462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005466:	2b15      	cmp	r3, #21
 8005468:	d8f6      	bhi.n	8005458 <_printf_i+0x28>
 800546a:	a101      	add	r1, pc, #4	@ (adr r1, 8005470 <_printf_i+0x40>)
 800546c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005470:	080054c9 	.word	0x080054c9
 8005474:	080054dd 	.word	0x080054dd
 8005478:	08005459 	.word	0x08005459
 800547c:	08005459 	.word	0x08005459
 8005480:	08005459 	.word	0x08005459
 8005484:	08005459 	.word	0x08005459
 8005488:	080054dd 	.word	0x080054dd
 800548c:	08005459 	.word	0x08005459
 8005490:	08005459 	.word	0x08005459
 8005494:	08005459 	.word	0x08005459
 8005498:	08005459 	.word	0x08005459
 800549c:	080055dd 	.word	0x080055dd
 80054a0:	08005507 	.word	0x08005507
 80054a4:	08005597 	.word	0x08005597
 80054a8:	08005459 	.word	0x08005459
 80054ac:	08005459 	.word	0x08005459
 80054b0:	080055ff 	.word	0x080055ff
 80054b4:	08005459 	.word	0x08005459
 80054b8:	08005507 	.word	0x08005507
 80054bc:	08005459 	.word	0x08005459
 80054c0:	08005459 	.word	0x08005459
 80054c4:	0800559f 	.word	0x0800559f
 80054c8:	6833      	ldr	r3, [r6, #0]
 80054ca:	1d1a      	adds	r2, r3, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6032      	str	r2, [r6, #0]
 80054d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054d8:	2301      	movs	r3, #1
 80054da:	e09d      	b.n	8005618 <_printf_i+0x1e8>
 80054dc:	6833      	ldr	r3, [r6, #0]
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	1d19      	adds	r1, r3, #4
 80054e2:	6031      	str	r1, [r6, #0]
 80054e4:	0606      	lsls	r6, r0, #24
 80054e6:	d501      	bpl.n	80054ec <_printf_i+0xbc>
 80054e8:	681d      	ldr	r5, [r3, #0]
 80054ea:	e003      	b.n	80054f4 <_printf_i+0xc4>
 80054ec:	0645      	lsls	r5, r0, #25
 80054ee:	d5fb      	bpl.n	80054e8 <_printf_i+0xb8>
 80054f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	da03      	bge.n	8005500 <_printf_i+0xd0>
 80054f8:	232d      	movs	r3, #45	@ 0x2d
 80054fa:	426d      	negs	r5, r5
 80054fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005500:	4859      	ldr	r0, [pc, #356]	@ (8005668 <_printf_i+0x238>)
 8005502:	230a      	movs	r3, #10
 8005504:	e011      	b.n	800552a <_printf_i+0xfa>
 8005506:	6821      	ldr	r1, [r4, #0]
 8005508:	6833      	ldr	r3, [r6, #0]
 800550a:	0608      	lsls	r0, r1, #24
 800550c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005510:	d402      	bmi.n	8005518 <_printf_i+0xe8>
 8005512:	0649      	lsls	r1, r1, #25
 8005514:	bf48      	it	mi
 8005516:	b2ad      	uxthmi	r5, r5
 8005518:	2f6f      	cmp	r7, #111	@ 0x6f
 800551a:	4853      	ldr	r0, [pc, #332]	@ (8005668 <_printf_i+0x238>)
 800551c:	6033      	str	r3, [r6, #0]
 800551e:	bf14      	ite	ne
 8005520:	230a      	movne	r3, #10
 8005522:	2308      	moveq	r3, #8
 8005524:	2100      	movs	r1, #0
 8005526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800552a:	6866      	ldr	r6, [r4, #4]
 800552c:	60a6      	str	r6, [r4, #8]
 800552e:	2e00      	cmp	r6, #0
 8005530:	bfa2      	ittt	ge
 8005532:	6821      	ldrge	r1, [r4, #0]
 8005534:	f021 0104 	bicge.w	r1, r1, #4
 8005538:	6021      	strge	r1, [r4, #0]
 800553a:	b90d      	cbnz	r5, 8005540 <_printf_i+0x110>
 800553c:	2e00      	cmp	r6, #0
 800553e:	d04b      	beq.n	80055d8 <_printf_i+0x1a8>
 8005540:	4616      	mov	r6, r2
 8005542:	fbb5 f1f3 	udiv	r1, r5, r3
 8005546:	fb03 5711 	mls	r7, r3, r1, r5
 800554a:	5dc7      	ldrb	r7, [r0, r7]
 800554c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005550:	462f      	mov	r7, r5
 8005552:	42bb      	cmp	r3, r7
 8005554:	460d      	mov	r5, r1
 8005556:	d9f4      	bls.n	8005542 <_printf_i+0x112>
 8005558:	2b08      	cmp	r3, #8
 800555a:	d10b      	bne.n	8005574 <_printf_i+0x144>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	07df      	lsls	r7, r3, #31
 8005560:	d508      	bpl.n	8005574 <_printf_i+0x144>
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	6861      	ldr	r1, [r4, #4]
 8005566:	4299      	cmp	r1, r3
 8005568:	bfde      	ittt	le
 800556a:	2330      	movle	r3, #48	@ 0x30
 800556c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005570:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005574:	1b92      	subs	r2, r2, r6
 8005576:	6122      	str	r2, [r4, #16]
 8005578:	f8cd a000 	str.w	sl, [sp]
 800557c:	464b      	mov	r3, r9
 800557e:	aa03      	add	r2, sp, #12
 8005580:	4621      	mov	r1, r4
 8005582:	4640      	mov	r0, r8
 8005584:	f7ff fee6 	bl	8005354 <_printf_common>
 8005588:	3001      	adds	r0, #1
 800558a:	d14a      	bne.n	8005622 <_printf_i+0x1f2>
 800558c:	f04f 30ff 	mov.w	r0, #4294967295
 8005590:	b004      	add	sp, #16
 8005592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f043 0320 	orr.w	r3, r3, #32
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	4833      	ldr	r0, [pc, #204]	@ (800566c <_printf_i+0x23c>)
 80055a0:	2778      	movs	r7, #120	@ 0x78
 80055a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	6831      	ldr	r1, [r6, #0]
 80055aa:	061f      	lsls	r7, r3, #24
 80055ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80055b0:	d402      	bmi.n	80055b8 <_printf_i+0x188>
 80055b2:	065f      	lsls	r7, r3, #25
 80055b4:	bf48      	it	mi
 80055b6:	b2ad      	uxthmi	r5, r5
 80055b8:	6031      	str	r1, [r6, #0]
 80055ba:	07d9      	lsls	r1, r3, #31
 80055bc:	bf44      	itt	mi
 80055be:	f043 0320 	orrmi.w	r3, r3, #32
 80055c2:	6023      	strmi	r3, [r4, #0]
 80055c4:	b11d      	cbz	r5, 80055ce <_printf_i+0x19e>
 80055c6:	2310      	movs	r3, #16
 80055c8:	e7ac      	b.n	8005524 <_printf_i+0xf4>
 80055ca:	4827      	ldr	r0, [pc, #156]	@ (8005668 <_printf_i+0x238>)
 80055cc:	e7e9      	b.n	80055a2 <_printf_i+0x172>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	f023 0320 	bic.w	r3, r3, #32
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	e7f6      	b.n	80055c6 <_printf_i+0x196>
 80055d8:	4616      	mov	r6, r2
 80055da:	e7bd      	b.n	8005558 <_printf_i+0x128>
 80055dc:	6833      	ldr	r3, [r6, #0]
 80055de:	6825      	ldr	r5, [r4, #0]
 80055e0:	6961      	ldr	r1, [r4, #20]
 80055e2:	1d18      	adds	r0, r3, #4
 80055e4:	6030      	str	r0, [r6, #0]
 80055e6:	062e      	lsls	r6, r5, #24
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	d501      	bpl.n	80055f0 <_printf_i+0x1c0>
 80055ec:	6019      	str	r1, [r3, #0]
 80055ee:	e002      	b.n	80055f6 <_printf_i+0x1c6>
 80055f0:	0668      	lsls	r0, r5, #25
 80055f2:	d5fb      	bpl.n	80055ec <_printf_i+0x1bc>
 80055f4:	8019      	strh	r1, [r3, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	4616      	mov	r6, r2
 80055fc:	e7bc      	b.n	8005578 <_printf_i+0x148>
 80055fe:	6833      	ldr	r3, [r6, #0]
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	6032      	str	r2, [r6, #0]
 8005604:	681e      	ldr	r6, [r3, #0]
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	2100      	movs	r1, #0
 800560a:	4630      	mov	r0, r6
 800560c:	f7fa fde8 	bl	80001e0 <memchr>
 8005610:	b108      	cbz	r0, 8005616 <_printf_i+0x1e6>
 8005612:	1b80      	subs	r0, r0, r6
 8005614:	6060      	str	r0, [r4, #4]
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	2300      	movs	r3, #0
 800561c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005620:	e7aa      	b.n	8005578 <_printf_i+0x148>
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	4632      	mov	r2, r6
 8005626:	4649      	mov	r1, r9
 8005628:	4640      	mov	r0, r8
 800562a:	47d0      	blx	sl
 800562c:	3001      	adds	r0, #1
 800562e:	d0ad      	beq.n	800558c <_printf_i+0x15c>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	079b      	lsls	r3, r3, #30
 8005634:	d413      	bmi.n	800565e <_printf_i+0x22e>
 8005636:	68e0      	ldr	r0, [r4, #12]
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	4298      	cmp	r0, r3
 800563c:	bfb8      	it	lt
 800563e:	4618      	movlt	r0, r3
 8005640:	e7a6      	b.n	8005590 <_printf_i+0x160>
 8005642:	2301      	movs	r3, #1
 8005644:	4632      	mov	r2, r6
 8005646:	4649      	mov	r1, r9
 8005648:	4640      	mov	r0, r8
 800564a:	47d0      	blx	sl
 800564c:	3001      	adds	r0, #1
 800564e:	d09d      	beq.n	800558c <_printf_i+0x15c>
 8005650:	3501      	adds	r5, #1
 8005652:	68e3      	ldr	r3, [r4, #12]
 8005654:	9903      	ldr	r1, [sp, #12]
 8005656:	1a5b      	subs	r3, r3, r1
 8005658:	42ab      	cmp	r3, r5
 800565a:	dcf2      	bgt.n	8005642 <_printf_i+0x212>
 800565c:	e7eb      	b.n	8005636 <_printf_i+0x206>
 800565e:	2500      	movs	r5, #0
 8005660:	f104 0619 	add.w	r6, r4, #25
 8005664:	e7f5      	b.n	8005652 <_printf_i+0x222>
 8005666:	bf00      	nop
 8005668:	080057d5 	.word	0x080057d5
 800566c:	080057e6 	.word	0x080057e6

08005670 <memmove>:
 8005670:	4288      	cmp	r0, r1
 8005672:	b510      	push	{r4, lr}
 8005674:	eb01 0402 	add.w	r4, r1, r2
 8005678:	d902      	bls.n	8005680 <memmove+0x10>
 800567a:	4284      	cmp	r4, r0
 800567c:	4623      	mov	r3, r4
 800567e:	d807      	bhi.n	8005690 <memmove+0x20>
 8005680:	1e43      	subs	r3, r0, #1
 8005682:	42a1      	cmp	r1, r4
 8005684:	d008      	beq.n	8005698 <memmove+0x28>
 8005686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800568a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800568e:	e7f8      	b.n	8005682 <memmove+0x12>
 8005690:	4402      	add	r2, r0
 8005692:	4601      	mov	r1, r0
 8005694:	428a      	cmp	r2, r1
 8005696:	d100      	bne.n	800569a <memmove+0x2a>
 8005698:	bd10      	pop	{r4, pc}
 800569a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800569e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056a2:	e7f7      	b.n	8005694 <memmove+0x24>

080056a4 <_sbrk_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d06      	ldr	r5, [pc, #24]	@ (80056c0 <_sbrk_r+0x1c>)
 80056a8:	2300      	movs	r3, #0
 80056aa:	4604      	mov	r4, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	f7fc f8ec 	bl	800188c <_sbrk>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d102      	bne.n	80056be <_sbrk_r+0x1a>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	b103      	cbz	r3, 80056be <_sbrk_r+0x1a>
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	bd38      	pop	{r3, r4, r5, pc}
 80056c0:	200003a8 	.word	0x200003a8

080056c4 <memcpy>:
 80056c4:	440a      	add	r2, r1
 80056c6:	4291      	cmp	r1, r2
 80056c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056cc:	d100      	bne.n	80056d0 <memcpy+0xc>
 80056ce:	4770      	bx	lr
 80056d0:	b510      	push	{r4, lr}
 80056d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056da:	4291      	cmp	r1, r2
 80056dc:	d1f9      	bne.n	80056d2 <memcpy+0xe>
 80056de:	bd10      	pop	{r4, pc}

080056e0 <_realloc_r>:
 80056e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e4:	4680      	mov	r8, r0
 80056e6:	4615      	mov	r5, r2
 80056e8:	460c      	mov	r4, r1
 80056ea:	b921      	cbnz	r1, 80056f6 <_realloc_r+0x16>
 80056ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056f0:	4611      	mov	r1, r2
 80056f2:	f7ff bc4b 	b.w	8004f8c <_malloc_r>
 80056f6:	b92a      	cbnz	r2, 8005704 <_realloc_r+0x24>
 80056f8:	f7ff fbdc 	bl	8004eb4 <_free_r>
 80056fc:	2400      	movs	r4, #0
 80056fe:	4620      	mov	r0, r4
 8005700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005704:	f000 f81a 	bl	800573c <_malloc_usable_size_r>
 8005708:	4285      	cmp	r5, r0
 800570a:	4606      	mov	r6, r0
 800570c:	d802      	bhi.n	8005714 <_realloc_r+0x34>
 800570e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005712:	d8f4      	bhi.n	80056fe <_realloc_r+0x1e>
 8005714:	4629      	mov	r1, r5
 8005716:	4640      	mov	r0, r8
 8005718:	f7ff fc38 	bl	8004f8c <_malloc_r>
 800571c:	4607      	mov	r7, r0
 800571e:	2800      	cmp	r0, #0
 8005720:	d0ec      	beq.n	80056fc <_realloc_r+0x1c>
 8005722:	42b5      	cmp	r5, r6
 8005724:	462a      	mov	r2, r5
 8005726:	4621      	mov	r1, r4
 8005728:	bf28      	it	cs
 800572a:	4632      	movcs	r2, r6
 800572c:	f7ff ffca 	bl	80056c4 <memcpy>
 8005730:	4621      	mov	r1, r4
 8005732:	4640      	mov	r0, r8
 8005734:	f7ff fbbe 	bl	8004eb4 <_free_r>
 8005738:	463c      	mov	r4, r7
 800573a:	e7e0      	b.n	80056fe <_realloc_r+0x1e>

0800573c <_malloc_usable_size_r>:
 800573c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005740:	1f18      	subs	r0, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	bfbc      	itt	lt
 8005746:	580b      	ldrlt	r3, [r1, r0]
 8005748:	18c0      	addlt	r0, r0, r3
 800574a:	4770      	bx	lr

0800574c <_init>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	bf00      	nop
 8005750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005752:	bc08      	pop	{r3}
 8005754:	469e      	mov	lr, r3
 8005756:	4770      	bx	lr

08005758 <_fini>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr
